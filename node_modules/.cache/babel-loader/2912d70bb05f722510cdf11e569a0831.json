{"ast":null,"code":"import { stopSubmit } from \"redux-form\";\nimport { profileAPI } from '../api/profile-api';\nlet initialState = {\n  posts: [{\n    id: 1,\n    message: 'Hi, how are you?',\n    likesCount: 12\n  }, {\n    id: 2,\n    message: 'It\\'s my first post',\n    likesCount: 11\n  }, {\n    id: 3,\n    message: 'Blabla',\n    likesCount: 11\n  }, {\n    id: 4,\n    message: 'Dada',\n    likesCount: 11\n  }],\n  profile: null,\n  status: ''\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SN/PROFILE/ADD-POST':\n      {\n        let newPost = {\n          id: 5,\n          message: action.newPostText,\n          likesCount: 0\n        };\n        return { ...state,\n          posts: [...state.posts, newPost]\n        };\n      }\n\n    case 'SN/PROFILE/SET_STATUS':\n      {\n        return { ...state,\n          status: action.status\n        };\n      }\n\n    case 'SN/PROFILE/SET_USER_PROFILE':\n      {\n        return { ...state,\n          profile: action.profile\n        };\n      }\n\n    case 'SN/PROFILE/DELETE_POST':\n      return { ...state,\n        posts: state.posts.filter(p => p.id != action.postId)\n      };\n\n    case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\n      return { ...state,\n        profile: { ...state.profile,\n          photos: action.photos\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  addPostActionCreator: newPostText => ({\n    type: 'SN/PROFILE/ADD-POST',\n    newPostText\n  }),\n  setUserProfile: profile => ({\n    type: 'SN/PROFILE/SET_USER_PROFILE',\n    profile\n  }),\n  setStatus: status => ({\n    type: 'SN/PROFILE/SET_STATUS',\n    status\n  }),\n  deletePost: postId => ({\n    type: 'SN/PROFILE/DELETE_POST',\n    postId\n  }),\n  savePhotoSuccess: photos => ({\n    type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS',\n    photos\n  })\n};\nexport const getUserProfile = userId => async dispatch => {\n  const data = await profileAPI.getProfile(userId);\n  dispatch(actions.setUserProfile(data));\n};\nexport const getStatus = userId => async dispatch => {\n  let data = await profileAPI.getStatus(userId);\n  dispatch(actions.setStatus(data));\n};\nexport const updateStatus = status => async dispatch => {\n  try {\n    let data = await profileAPI.updateStatus(status);\n\n    if (data.resultCode === 0) {\n      dispatch(actions.setStatus(status));\n    }\n  } catch (error) {//\n  }\n};\nexport const savePhoto = file => async dispatch => {\n  let data = await profileAPI.savePhoto(file);\n\n  if (data.resultCode === 0) {\n    dispatch(actions.savePhotoSuccess(data.data.photos));\n  }\n};\nexport const saveProfile = profile => async (dispatch, getState) => {\n  const userId = getState().auth.userId;\n  const data = await profileAPI.saveProfile(profile);\n\n  if (data.resultCode === 0) {\n    if (userId != null) {\n      dispatch(getUserProfile(userId));\n    } else {\n      throw new Error(\"userId can't be null\");\n    }\n  } else {\n    dispatch(stopSubmit(\"edit-profile\", {\n      _error: data.messages[0]\n    }));\n    return Promise.reject(data.messages[0]);\n  }\n};\nexport default profileReducer;","map":{"version":3,"sources":["D:/react-way-of-samurai/src/redux/profile-reducer.ts"],"names":["stopSubmit","profileAPI","initialState","posts","id","message","likesCount","profile","status","profileReducer","state","action","type","newPost","newPostText","filter","p","postId","photos","actions","addPostActionCreator","setUserProfile","setStatus","deletePost","savePhotoSuccess","getUserProfile","userId","dispatch","data","getProfile","getStatus","updateStatus","resultCode","error","savePhoto","file","saveProfile","getState","auth","Error","_error","messages","Promise","reject"],"mappings":"AAAA,SAAoBA,UAApB,QAAqC,YAArC;AAGA,SAAQC,UAAR,QAAyB,oBAAzB;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAE,CACH;AAACC,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,OAAO,EAAE,kBAAjB;AAAqCC,IAAAA,UAAU,EAAE;AAAjD,GADG,EAEH;AAACF,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,OAAO,EAAE,qBAAjB;AAAwCC,IAAAA,UAAU,EAAE;AAApD,GAFG,EAGH;AAACF,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,OAAO,EAAE,QAAjB;AAA2BC,IAAAA,UAAU,EAAE;AAAvC,GAHG,EAIH;AAACF,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,OAAO,EAAE,MAAjB;AAAyBC,IAAAA,UAAU,EAAE;AAArC,GAJG,CADQ;AAOfC,EAAAA,OAAO,EAAE,IAPM;AAQfC,EAAAA,MAAM,EAAE;AARO,CAAnB;;AAWA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAiE;AAEpF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,qBAAL;AAA4B;AACxB,YAAIC,OAAO,GAAG;AACVT,UAAAA,EAAE,EAAE,CADM;AAEVC,UAAAA,OAAO,EAAEM,MAAM,CAACG,WAFN;AAGVR,UAAAA,UAAU,EAAE;AAHF,SAAd;AAKA,eAAO,EACH,GAAGI,KADA;AAEHP,UAAAA,KAAK,EAAE,CAAC,GAAGO,KAAK,CAACP,KAAV,EAAiBU,OAAjB;AAFJ,SAAP;AAIH;;AACD,SAAK,uBAAL;AAA8B;AAC1B,eAAO,EACH,GAAGH,KADA;AAEHF,UAAAA,MAAM,EAAEG,MAAM,CAACH;AAFZ,SAAP;AAIH;;AACD,SAAK,6BAAL;AAAoC;AAChC,eAAO,EAAC,GAAGE,KAAJ;AAAWH,UAAAA,OAAO,EAAEI,MAAM,CAACJ;AAA3B,SAAP;AACH;;AAED,SAAK,wBAAL;AACI,aAAO,EAAC,GAAGG,KAAJ;AAAWP,QAAAA,KAAK,EAAEO,KAAK,CAACP,KAAN,CAAYY,MAAZ,CAAmBC,CAAC,IAAIA,CAAC,CAACZ,EAAF,IAAQO,MAAM,CAACM,MAAvC;AAAlB,OAAP;;AAEJ,SAAK,+BAAL;AACI,aAAO,EAAC,GAAGP,KAAJ;AAAWH,QAAAA,OAAO,EAAE,EAAC,GAAGG,KAAK,CAACH,OAAV;AAAmBW,UAAAA,MAAM,EAAEP,MAAM,CAACO;AAAlC;AAApB,OAAP;;AACJ;AACI,aAAOR,KAAP;AA5BR;AA8BH,CAhCD;;AAmCA,OAAO,MAAMS,OAAO,GAAG;AACnBC,EAAAA,oBAAoB,EAAGN,WAAD,KAA0B;AAACF,IAAAA,IAAI,EAAE,qBAAP;AAA8BE,IAAAA;AAA9B,GAA1B,CADH;AAEnBO,EAAAA,cAAc,EAAGd,OAAD,KAA2B;AAACK,IAAAA,IAAI,EAAE,6BAAP;AAAsCL,IAAAA;AAAtC,GAA3B,CAFG;AAGnBe,EAAAA,SAAS,EAAGd,MAAD,KAAqB;AAACI,IAAAA,IAAI,EAAE,uBAAP;AAAgCJ,IAAAA;AAAhC,GAArB,CAHQ;AAInBe,EAAAA,UAAU,EAAGN,MAAD,KAAqB;AAACL,IAAAA,IAAI,EAAE,wBAAP;AAAiCK,IAAAA;AAAjC,GAArB,CAJO;AAKnBO,EAAAA,gBAAgB,EAAGN,MAAD,KAAyB;AAACN,IAAAA,IAAI,EAAE,+BAAP;AAAwCM,IAAAA;AAAxC,GAAzB;AALC,CAAhB;AAQP,OAAO,MAAMO,cAAc,GAAIC,MAAD,IAA+B,MAAOC,QAAP,IAAoB;AAC7E,QAAMC,IAAI,GAAG,MAAM3B,UAAU,CAAC4B,UAAX,CAAsBH,MAAtB,CAAnB;AACAC,EAAAA,QAAQ,CAACR,OAAO,CAACE,cAAR,CAAuBO,IAAvB,CAAD,CAAR;AACH,CAHM;AAKP,OAAO,MAAME,SAAS,GAAIJ,MAAD,IAA+B,MAAOC,QAAP,IAAoB;AACxE,MAAIC,IAAI,GAAG,MAAM3B,UAAU,CAAC6B,SAAX,CAAqBJ,MAArB,CAAjB;AACAC,EAAAA,QAAQ,CAACR,OAAO,CAACG,SAAR,CAAkBM,IAAlB,CAAD,CAAR;AACH,CAHM;AAKP,OAAO,MAAMG,YAAY,GAAIvB,MAAD,IAA+B,MAAOmB,QAAP,IAAoB;AAC3E,MAAI;AACA,QAAIC,IAAI,GAAG,MAAM3B,UAAU,CAAC8B,YAAX,CAAwBvB,MAAxB,CAAjB;;AAEA,QAAIoB,IAAI,CAACI,UAAL,KAAoB,CAAxB,EAA2B;AACvBL,MAAAA,QAAQ,CAACR,OAAO,CAACG,SAAR,CAAkBd,MAAlB,CAAD,CAAR;AACH;AACJ,GAND,CAME,OAAMyB,KAAN,EAAa,CACX;AACH;AACJ,CAVM;AAYP,OAAO,MAAMC,SAAS,GAAIC,IAAD,IAA2B,MAAOR,QAAP,IAAoB;AACpE,MAAIC,IAAI,GAAG,MAAM3B,UAAU,CAACiC,SAAX,CAAqBC,IAArB,CAAjB;;AAEA,MAAIP,IAAI,CAACI,UAAL,KAAoB,CAAxB,EAA2B;AACvBL,IAAAA,QAAQ,CAACR,OAAO,CAACK,gBAAR,CAAyBI,IAAI,CAACA,IAAL,CAAUV,MAAnC,CAAD,CAAR;AACH;AACJ,CANM;AAQP,OAAO,MAAMkB,WAAW,GAAI7B,OAAD,IAAqC,OAAOoB,QAAP,EAAiBU,QAAjB,KAA8B;AAC1F,QAAMX,MAAM,GAAGW,QAAQ,GAAGC,IAAX,CAAgBZ,MAA/B;AACA,QAAME,IAAI,GAAG,MAAM3B,UAAU,CAACmC,WAAX,CAAuB7B,OAAvB,CAAnB;;AAEA,MAAIqB,IAAI,CAACI,UAAL,KAAoB,CAAxB,EAA2B;AACvB,QAAIN,MAAM,IAAI,IAAd,EAAoB;AAChBC,MAAAA,QAAQ,CAACF,cAAc,CAACC,MAAD,CAAf,CAAR;AACH,KAFD,MAEO;AACH,YAAM,IAAIa,KAAJ,CAAU,sBAAV,CAAN;AACH;AACJ,GAND,MAMO;AACHZ,IAAAA,QAAQ,CAAC3B,UAAU,CAAC,cAAD,EAAiB;AAACwC,MAAAA,MAAM,EAAEZ,IAAI,CAACa,QAAL,CAAc,CAAd;AAAT,KAAjB,CAAX,CAAR;AACA,WAAOC,OAAO,CAACC,MAAR,CAAef,IAAI,CAACa,QAAL,CAAc,CAAd,CAAf,CAAP;AACH;AACJ,CAdM;AAgBP,eAAehC,cAAf","sourcesContent":["import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from '../types/types';\r\nimport {usersAPI} from '../api/users-api';\r\nimport {profileAPI} from '../api/profile-api';\r\nimport {BaseThunkType, InferActionsTypes} from './redux-store';\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\r\n        {id: 3, message: 'Blabla', likesCount: 11},\r\n        {id: 4, message: 'Dada', likesCount: 11}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SN/PROFILE/ADD-POST': {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n        }\r\n        case 'SN/PROFILE/SET_STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case 'SN/PROFILE/SET_USER_PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n\r\n        case 'SN/PROFILE/DELETE_POST':\r\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\r\n\r\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\r\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD-POST', newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\r\n    deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\r\n}\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId)\r\n    dispatch(actions.setUserProfile(data))\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    dispatch(actions.setStatus(data))\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        let data = await profileAPI.updateStatus(status)\r\n\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.setStatus(status))\r\n        }\r\n    } catch(error) {\r\n        //\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file)\r\n\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos))\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.saveProfile(profile)\r\n\r\n    if (data.resultCode === 0) {\r\n        if (userId != null) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0] }))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n"]},"metadata":{},"sourceType":"module"}