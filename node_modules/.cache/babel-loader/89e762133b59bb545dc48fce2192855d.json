{"ast":null,"code":"import { updateObjectInArray } from '../utils/object-helpers';\nimport { usersAPI } from '../api/users-api';\nlet initialState = {\n  users: [],\n  pageSize: 10,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: [],\n  //array of users ids,\n  filter: {\n    term: '',\n    friend: null\n  }\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SN/USERS/FOLLOW':\n      return { ...state,\n        users: updateObjectInArray(state.users, action.userId, 'id', {\n          followed: true\n        })\n      };\n\n    case 'SN/USERS/UNFOLLOW':\n      return { ...state,\n        users: updateObjectInArray(state.users, action.userId, 'id', {\n          followed: false\n        })\n      };\n\n    case 'SN/USERS/SET_USERS':\n      {\n        return { ...state,\n          users: action.users\n        };\n      }\n\n    case 'SN/USERS/SET_CURRENT_PAGE':\n      {\n        return { ...state,\n          currentPage: action.currentPage\n        };\n      }\n\n    case 'SN/USERS/SET_TOTAL_USERS_COUNT':\n      {\n        return { ...state,\n          totalUsersCount: action.count\n        };\n      }\n\n    case 'SN/USERS/TOGGLE_IS_FETCHING':\n      {\n        return { ...state,\n          isFetching: action.isFetching\n        };\n      }\n\n    case 'SN/USERS/SET_FILTER':\n      {\n        return { ...state,\n          filter: action.payload\n        };\n      }\n\n    case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS':\n      {\n        return { ...state,\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  followSuccess: userId => ({\n    type: 'SN/USERS/FOLLOW',\n    userId\n  }),\n  unfollowSuccess: userId => ({\n    type: 'SN/USERS/UNFOLLOW',\n    userId\n  }),\n  setUsers: users => ({\n    type: 'SN/USERS/SET_USERS',\n    users\n  }),\n  setCurrentPage: currentPage => ({\n    type: 'SN/USERS/SET_CURRENT_PAGE',\n    currentPage\n  }),\n  setFilter: filter => ({\n    type: 'SN/USERS/SET_FILTER',\n    payload: filter\n  }),\n  setTotalUsersCount: totalUsersCount => ({\n    type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\n    count: totalUsersCount\n  }),\n  toggleIsFetching: isFetching => ({\n    type: 'SN/USERS/TOGGLE_IS_FETCHING',\n    isFetching\n  }),\n  toggleFollowingProgress: (isFetching, userId) => ({\n    type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\n    isFetching,\n    userId\n  })\n};\nexport const requestUsers = (page, pageSize, filter) => {\n  return async (dispatch, getState) => {\n    dispatch(actions.toggleIsFetching(true));\n    dispatch(actions.setCurrentPage(page));\n    dispatch(actions.setFilter(filter));\n    let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend);\n    dispatch(actions.toggleIsFetching(false));\n    dispatch(actions.setUsers(data.items));\n    dispatch(actions.setTotalUsersCount(data.totalCount));\n  };\n};\n\nconst _followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\n  dispatch(actions.toggleFollowingProgress(true, userId));\n  let response = await apiMethod(userId);\n\n  if (response.resultCode == 0) {\n    dispatch(actionCreator(userId));\n  }\n\n  dispatch(actions.toggleFollowingProgress(false, userId));\n};\n\nexport const follow = userId => {\n  return async dispatch => {\n    await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\n  };\n};\nexport const unfollow = userId => {\n  return async dispatch => {\n    await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess);\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["D:/react-way-of-samurai/src/redux/users-reducer.ts"],"names":["updateObjectInArray","usersAPI","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","filter","term","friend","usersReducer","state","action","type","userId","followed","count","payload","id","actions","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setFilter","setTotalUsersCount","toggleIsFetching","toggleFollowingProgress","requestUsers","page","dispatch","getState","data","getUsers","items","totalCount","_followUnfollowFlow","apiMethod","actionCreator","response","resultCode","follow","bind","unfollow"],"mappings":"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","sourcesContent":["import {updateObjectInArray} from '../utils/object-helpers'\r\nimport {UserType} from '../types/types'\r\nimport {BaseThunkType, InferActionsTypes} from './redux-store'\r\nimport {Dispatch} from 'redux'\r\nimport {usersAPI} from '../api/users-api'\r\nimport {APIResponseType} from '../api/api'\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, //array of users ids,\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        case 'SN/USERS/SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'SN/USERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case 'SN/USERS/SET_FILTER': {\r\n            return {...state, filter: action.payload}\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: filter} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\r\n        count: totalUsersCount\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FETCHING',\r\n        isFetching\r\n    } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n}\r\n\r\nexport const requestUsers = (page: number,\r\n                             pageSize: number, filter: FilterType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.toggleIsFetching(true))\r\n        dispatch(actions.setCurrentPage(page))\r\n        dispatch(actions.setFilter(filter))\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\r\n        dispatch(actions.toggleIsFetching(false))\r\n        dispatch(actions.setUsers(data.items))\r\n        dispatch(actions.setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\r\n                                   userId: number,\r\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                   actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n\r\n    if (response.resultCode == 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport default usersReducer\r\n\r\nexport type InitialState = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n"]},"metadata":{},"sourceType":"module"}