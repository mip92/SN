{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\react-way-of-samurai\\\\src\\\\components\\\\common\\\\Paginator\\\\Paginator.js\";\n\nimport s from \"../../Users/Users.module.css\";\nimport React from \"react\";\nimport DialogItem from \"../../Dialogs/DialogItem/DialogItem\";\nexport var Paginator = function Paginator(props) {\n  var pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\n  var pages = [];\n\n  for (var i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  }\n\n  var startOfBlock = 2;\n  var endOfBlock = 10;\n  var users = [{\n    id: 1,\n    name: \"Вася\"\n  }, {\n    id: 2,\n    name: \"Петя\"\n  }, {\n    id: 3,\n    name: \"Маша\"\n  }];\n  var someUsers = users.filter(function (item) {\n    return item.id < 3;\n  });\n  var someBlock = pages.filter(function (item) {\n    return item < endOfBlock && item > startOfBlock;\n  }); // alert(someBlock); // 2\n\n  {\n    startOfBlock && /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 22\n      }\n    }, \"prv\");\n  }\n  var line = someBlock.map(function (d) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      onClick: function onClick() {\n        props.onPageChanged(d);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 37\n      }\n    }, \" \", d, \" \");\n  });\n  /*\r\n  \r\n      let mafs = () => {\r\n          for (let i = 1; i < pages.length; i++) {\r\n              if (props.currentPage == 1) return <div>\r\n              <span className={s.selectedPage} onClick={() => {\r\n                  props.onPageChanged(i);\r\n              }}> {i} </span>\r\n                  <span className={props.currentPage + 1 === i && s.selectedPage} onClick={() => {\r\n                      props.onPageChanged(i + 1);\r\n                  }}> {i + 1} </span>\r\n                  <span>...</span>\r\n                  <span className={pages.length === i && s.selectedPage} onClick={() => {\r\n                      props.onPageChanged(pages.length);\r\n                  }}>{pages.length}\r\n              </span>\r\n              </div>\r\n              if (props.currentPage == i) return <div><span className={props.currentPage - 1 === i && s.selectedPage}\r\n                                                            onClick={() => {\r\n                                                                props.onPageChanged(i - 1);\r\n                                                            }}> {i - 1} </span>\r\n                  <span className={s.selectedPage} onClick={() => {\r\n                      props.onPageChanged(i);\r\n                  }}> {i} </span>\r\n                  <span className={props.currentPage + 1 === i && s.selectedPage} onClick={() => {\r\n                      props.onPageChanged(i + 1);\r\n                  }}> {i + 1} </span>\r\n                  <span>...</span>\r\n                  <span className={pages.length === i && s.selectedPage} onClick={() => {\r\n                      props.onPageChanged(pages.length);\r\n                  }}>{pages.length}\r\n              </span></div>\r\n  \r\n              if (props.currentPage == pages.length-1) return <div><span onClick={() => {\r\n                  props.onPageChanged(1);\r\n              }}> {1} </span>\r\n                  <span>...</span>\r\n                  <span onClick={() => {\r\n                      props.onPageChanged(pages.length - 3);\r\n                  }}> {pages.length - 2} </span>\r\n                  <span className={s.selectedPage} onClick={() => {\r\n                      props.onPageChanged(pages.length - 2);\r\n                  }}> {pages.length - 1} </span>\r\n                  <span onClick={() => {\r\n                      props.onPageChanged(pages.length);\r\n                  }}> {pages.length}\r\n              </span></div>\r\n  \r\n              if (props.currentPage == pages.length) return <div><span onClick={() => {\r\n                  props.onPageChanged(1);\r\n              }}> {1} </span>\r\n                  <span>...</span>\r\n                  <span onClick={() => {\r\n                      props.onPageChanged(pages.length - 1);\r\n                  }}> {pages.length - 1} </span>\r\n                  <span className={s.selectedPage} onClick={() => {\r\n                      props.onPageChanged(pages.length);\r\n                  }}> {pages.length}\r\n              </span></div>\r\n          }\r\n      }*/\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, line);\n};","map":{"version":3,"sources":["D:/react-way-of-samurai/src/components/common/Paginator/Paginator.js"],"names":["s","React","DialogItem","Paginator","props","pagesCount","Math","ceil","totalUsersCount","pageSize","pages","i","push","startOfBlock","endOfBlock","users","id","name","someUsers","filter","item","someBlock","line","map","d","onPageChanged"],"mappings":";;;AAAA,OAAOA,CAAP,MAAc,8BAAd;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AAGA,OAAO,IAAIC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAW;AAC9B,MAAIC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUH,KAAK,CAACI,eAAN,GAAwBJ,KAAK,CAACK,QAAxC,CAAjB;AACA,MAAIC,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIN,UAArB,EAAiCM,CAAC,EAAlC,EAAsC;AAClCD,IAAAA,KAAK,CAACE,IAAN,CAAWD,CAAX;AACH;;AACD,MAAIE,YAAY,GAAC,CAAjB;AACA,MAAIC,UAAU,GAAC,EAAf;AACA,MAAIC,KAAK,GAAG,CACR;AAACC,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAE;AAAd,GADQ,EAER;AAACD,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAE;AAAd,GAFQ,EAGR;AAACD,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAE;AAAd,GAHQ,CAAZ;AAKA,MAAIC,SAAS,GAAGH,KAAK,CAACI,MAAN,CAAa,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACJ,EAAL,GAAU,CAAd;AAAA,GAAjB,CAAhB;AACA,MAAIK,SAAS,GAAGX,KAAK,CAACS,MAAN,CAAa,UAAAC,IAAI;AAAA,WAAIA,IAAI,GAAGN,UAAP,IAAqBM,IAAI,GAAGP,YAAhC;AAAA,GAAjB,CAAhB,CAd8B,CAe/B;;AACC;AAACA,IAAAA,YAAY,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAhB;AAAiC;AAClC,MAAIS,IAAI,GAAGD,SAAS,CAACE,GAAV,CAAc,UAACC,CAAD;AAAA,wBAAO;AAAM,MAAA,OAAO,EAAE,mBAAM;AAACpB,QAAAA,KAAK,CAACqB,aAAN,CAAoBD,CAApB;AAAuB,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAiDA,CAAjD,MAAP;AAAA,GAAd,CAAX;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,IADL,CADJ;AAMH,CArFM","sourcesContent":["import s from \"../../Users/Users.module.css\";\r\nimport React from \"react\";\r\nimport DialogItem from \"../../Dialogs/DialogItem/DialogItem\";\r\n\r\n\r\nexport let Paginator = (props) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    let startOfBlock=2;\r\n    let endOfBlock=10;\r\n    let users = [\r\n        {id: 1, name: \"Вася\"},\r\n        {id: 2, name: \"Петя\"},\r\n        {id: 3, name: \"Маша\"}\r\n    ];\r\n    let someUsers = users.filter(item => item.id < 3);\r\n    let someBlock = pages.filter(item => item < endOfBlock && item > startOfBlock);\r\n   // alert(someBlock); // 2\r\n    {startOfBlock && <span>prv</span>}\r\n    let line = someBlock.map((d) => <span onClick={() => {props.onPageChanged(d)}}> {d} </span>)\r\n/*\r\n\r\n    let mafs = () => {\r\n        for (let i = 1; i < pages.length; i++) {\r\n            if (props.currentPage == 1) return <div>\r\n            <span className={s.selectedPage} onClick={() => {\r\n                props.onPageChanged(i);\r\n            }}> {i} </span>\r\n                <span className={props.currentPage + 1 === i && s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(i + 1);\r\n                }}> {i + 1} </span>\r\n                <span>...</span>\r\n                <span className={pages.length === i && s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(pages.length);\r\n                }}>{pages.length}\r\n            </span>\r\n            </div>\r\n            if (props.currentPage == i) return <div><span className={props.currentPage - 1 === i && s.selectedPage}\r\n                                                          onClick={() => {\r\n                                                              props.onPageChanged(i - 1);\r\n                                                          }}> {i - 1} </span>\r\n                <span className={s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(i);\r\n                }}> {i} </span>\r\n                <span className={props.currentPage + 1 === i && s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(i + 1);\r\n                }}> {i + 1} </span>\r\n                <span>...</span>\r\n                <span className={pages.length === i && s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(pages.length);\r\n                }}>{pages.length}\r\n            </span></div>\r\n\r\n            if (props.currentPage == pages.length-1) return <div><span onClick={() => {\r\n                props.onPageChanged(1);\r\n            }}> {1} </span>\r\n                <span>...</span>\r\n                <span onClick={() => {\r\n                    props.onPageChanged(pages.length - 3);\r\n                }}> {pages.length - 2} </span>\r\n                <span className={s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(pages.length - 2);\r\n                }}> {pages.length - 1} </span>\r\n                <span onClick={() => {\r\n                    props.onPageChanged(pages.length);\r\n                }}> {pages.length}\r\n            </span></div>\r\n\r\n            if (props.currentPage == pages.length) return <div><span onClick={() => {\r\n                props.onPageChanged(1);\r\n            }}> {1} </span>\r\n                <span>...</span>\r\n                <span onClick={() => {\r\n                    props.onPageChanged(pages.length - 1);\r\n                }}> {pages.length - 1} </span>\r\n                <span className={s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(pages.length);\r\n                }}> {pages.length}\r\n            </span></div>\r\n        }\r\n    }*/\r\n    return (\r\n        <div>\r\n            {line}\r\n        </div>\r\n    )\r\n\r\n}"]},"metadata":{},"sourceType":"module"}