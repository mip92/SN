{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-way-of-samurai\\\\src\\\\hoc\\\\withAuthRedirect.tsx\";\nimport React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nlet mapStateToPropsForRedirect = state => ({\n  isAuth: state.auth.isAuth\n});\n\nexport function withAuthRedirect(WrappedComponent) {\n  const RedirectComponent = props => {\n    let {\n      isAuth,\n      ...restProps\n    } = props;\n    if (!isAuth) return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 29\n      }\n    });\n    return /*#__PURE__*/React.createElement(WrappedComponent, Object.assign({}, restProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 16\n      }\n    }));\n  };\n\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect, {})(RedirectComponent);\n  return ConnectedAuthRedirectComponent;\n}","map":{"version":3,"sources":["D:/react-way-of-samurai/src/hoc/withAuthRedirect.tsx"],"names":["React","Redirect","connect","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","RedirectComponent","props","restProps","ConnectedAuthRedirectComponent"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAGA,IAAIC,0BAA0B,GAAIC,KAAD,KAA0B;AACvDC,EAAAA,MAAM,EAAED,KAAK,CAACE,IAAN,CAAWD;AADoC,CAA1B,CAAjC;;AAUA,OAAO,SAASE,gBAAT,CAA+BC,gBAA/B,EAA2E;AAE9E,QAAMC,iBAA6D,GAAIC,KAAD,IAAW;AAC7E,QAAI;AAACL,MAAAA,MAAD;AAAS,SAAGM;AAAZ,QAAyBD,KAA7B;AAEA,QAAI,CAACL,MAAL,EAAa,oBAAO,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAEb,wBAAO,oBAAC,gBAAD,oBAAsBM,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACH,GAND;;AAQA,MAAIC,8BAA8B,GAAGV,OAAO,CACxCC,0BADwC,EACZ,EADY,CAAP,CAEpCM,iBAFoC,CAArC;AAIA,SAAOG,8BAAP;AACH","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from '../redux/redux-store';\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}