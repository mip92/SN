{"ast":null,"code":"import _objectSpread from \"D:\\\\react-way-of-samurai\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { authAPI, profileAPI } from \"../api/api\";\nvar SET_USER_DATA = \"SET-USER-DATA\";\nvar SET_USER_SMALL_PHOTO = \"SET-USER-SMALL-PHOTO\";\nvar GET_ID = \"GET-ID\";\nvar initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  smallPhoto: null\n};\nexport var authReducer = function authReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_USER_DATA:\n      return _objectSpread(_objectSpread(_objectSpread({}, state), action.data), {}, {\n        isAuth: true\n      });\n\n    case SET_USER_SMALL_PHOTO:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        smallPhoto: action.smallPhoto\n      });\n\n    case GET_ID:\n      return state.id;\n\n    default:\n      return state;\n  }\n};\nexport var setAuthUserData = function setAuthUserData(userId, email, login) {\n  return {\n    type: SET_USER_DATA,\n    data: {\n      userId,\n      email,\n      login\n    }\n  };\n};\nexport var setUserSmallPhoto = function setUserSmallPhoto(smallPhoto) {\n  return {\n    type: SET_USER_SMALL_PHOTO,\n    smallPhoto\n  };\n};\nexport var getId = function getId() {\n  return {\n    type: GET_ID\n  };\n};\nexport var authMe = function authMe() {\n  return function (dispatch) {\n    var id;\n    var login;\n    var email;\n    authAPI.authMe().then(function (data) {\n      if (data.resultCode == 0) {\n        id = data.data.id;\n        login = data.data.login;\n        email = data.data.email;\n        dispatch(setAuthUserData(id, email, login));\n      }\n    })\n    /*.then(response => {\r\n        profileAPI.getUser(getId()).then(data => {\r\n            dispatch(setUserSmallPhoto(data.photos.small));\r\n        })\r\n    })*/\n    .then(function (response) {\n      profileAPI.getUser(id).then(function (data) {\n        dispatch(setUserSmallPhoto(data.photos.small));\n      });\n    });\n  };\n};\n/* ;*/","map":{"version":3,"sources":["D:/react-way-of-samurai/src/redux/authReducer.js"],"names":["authAPI","profileAPI","SET_USER_DATA","SET_USER_SMALL_PHOTO","GET_ID","initialState","id","email","login","isAuth","smallPhoto","authReducer","state","action","type","data","setAuthUserData","userId","setUserSmallPhoto","getId","authMe","dispatch","then","resultCode","response","getUser","photos","small"],"mappings":";AAAA,SAAQA,OAAR,EAAiBC,UAAjB,QAAkC,YAAlC;AAEA,IAAMC,aAAa,GAAG,eAAtB;AACA,IAAMC,oBAAoB,GAAG,sBAA7B;AACA,IAAMC,MAAM,GAAE,QAAd;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE,KAJO;AAKfC,EAAAA,UAAU,EAAE;AALG,CAAnB;AAQA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBP,YAAyB;AAAA,MAAXQ,MAAW;;AACzD,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKZ,aAAL;AACI,2DACOU,KADP,GAEOC,MAAM,CAACE,IAFd;AAGIN,QAAAA,MAAM,EAAE;AAHZ;;AAKJ,SAAKN,oBAAL;AACI,6CACOS,KADP;AAEIF,QAAAA,UAAU,EAAEG,MAAM,CAACH;AAFvB;;AAIJ,SAAKN,MAAL;AACI,aAAOQ,KAAK,CAACN,EAAb;;AACJ;AACI,aAAOM,KAAP;AAhBR;AAkBH,CAnBM;AAsBP,OAAO,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAACC,MAAD,EAASV,KAAT,EAAgBC,KAAhB,EAA0B;AAAC,SAAO;AAACM,IAAAA,IAAI,EAAEZ,aAAP;AAAsBa,IAAAA,IAAI,EAAC;AAACE,MAAAA,MAAD;AAASV,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB;AAA3B,GAAP;AAA0D,CAA7G;AACP,OAAO,IAAMU,iBAAiB,GAAC,SAAlBA,iBAAkB,CAACR,UAAD,EAAc;AAAC,SAAM;AAACI,IAAAA,IAAI,EAACX,oBAAN;AAA2BO,IAAAA;AAA3B,GAAN;AAA6C,CAApF;AACP,OAAO,IAAMS,KAAK,GAAC,SAANA,KAAM,GAAI;AAAC,SAAM;AAACL,IAAAA,IAAI,EAACV;AAAN,GAAN;AAAoB,CAArC;AACP,OAAO,IAAMgB,MAAM,GAAG,SAATA,MAAS,GAAM;AACxB,SAAO,UAACC,QAAD,EAAc;AACjB,QAAIf,EAAJ;AACA,QAAIE,KAAJ;AACA,QAAID,KAAJ;AACAP,IAAAA,OAAO,CAACoB,MAAR,GAAiBE,IAAjB,CAAsB,UAAAP,IAAI,EAAI;AAC1B,UAAIA,IAAI,CAACQ,UAAL,IAAmB,CAAvB,EAA0B;AACtBjB,QAAAA,EAAE,GAACS,IAAI,CAACA,IAAL,CAAUT,EAAb;AACAE,QAAAA,KAAK,GAACO,IAAI,CAACA,IAAL,CAAUP,KAAhB;AACAD,QAAAA,KAAK,GAACQ,IAAI,CAACA,IAAL,CAAUR,KAAhB;AACAc,QAAAA,QAAQ,CAACL,eAAe,CAACV,EAAD,EAAKC,KAAL,EAAYC,KAAZ,CAAhB,CAAR;AACH;AACJ,KAPD;AAQI;AACZ;AACA;AACA;AACA;AAZQ,KAaCc,IAbD,CAaM,UAAAE,QAAQ,EAAI;AACdvB,MAAAA,UAAU,CAACwB,OAAX,CAAmBnB,EAAnB,EAAuBgB,IAAvB,CAA4B,UAAAP,IAAI,EAAI;AAEhCM,QAAAA,QAAQ,CAACH,iBAAiB,CAACH,IAAI,CAACW,MAAL,CAAYC,KAAb,CAAlB,CAAR;AACH,OAHD;AAIH,KAlBD;AAmBH,GAvBD;AAwBH,CAzBM;AA0BP","sourcesContent":["import {authAPI, profileAPI} from \"../api/api\";\r\n\r\nconst SET_USER_DATA = \"SET-USER-DATA\";\r\nconst SET_USER_SMALL_PHOTO = \"SET-USER-SMALL-PHOTO\";\r\nconst GET_ID= \"GET-ID\"\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    smallPhoto: null\r\n};\r\n\r\nexport const authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true,\r\n            }\r\n        case SET_USER_SMALL_PHOTO:\r\n            return {\r\n                ...state,\r\n                smallPhoto: action.smallPhoto,\r\n            }\r\n        case GET_ID:\r\n            return state.id\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const setAuthUserData = (userId, email, login) => {return {type: SET_USER_DATA, data:{userId, email, login}}};\r\nexport const setUserSmallPhoto=(smallPhoto)=>{return{type:SET_USER_SMALL_PHOTO,smallPhoto}};\r\nexport const getId=()=>{return{type:GET_ID}};\r\nexport const authMe = () => {\r\n    return (dispatch) => {\r\n        let id;\r\n        let login;\r\n        let email;\r\n        authAPI.authMe().then(data => {\r\n            if (data.resultCode == 0) {\r\n                id=data.data.id;\r\n                login=data.data.login;\r\n                email=data.data.email;\r\n                dispatch(setAuthUserData(id, email, login));\r\n            }\r\n        })\r\n            /*.then(response => {\r\n                profileAPI.getUser(getId()).then(data => {\r\n                    dispatch(setUserSmallPhoto(data.photos.small));\r\n                })\r\n            })*/\r\n        .then(response => {\r\n            profileAPI.getUser(id).then(data => {\r\n\r\n                dispatch(setUserSmallPhoto(data.photos.small));\r\n            })\r\n        })\r\n    }\r\n}\r\n/* ;*/\r\n"]},"metadata":{},"sourceType":"module"}