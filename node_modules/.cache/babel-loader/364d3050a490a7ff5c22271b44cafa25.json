{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-way-of-samurai\\\\src\\\\components\\\\Profile\\\\ProfileContainer.tsx\";\nimport React from 'react';\nimport Profile from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport { getStatus, getUserProfile, savePhoto, saveProfile, updateStatus } from \"../../redux/profile-reducer\";\nimport { withRouter } from \"react-router-dom\";\nimport { compose } from \"redux\";\n\nclass ProfileContainer extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  refreshProfile() {\n    let userId = +this.props.match.params.userId;\n\n    if (!userId) {\n      userId = this.props.authorizedUserId;\n\n      if (!userId) {\n        // todo: may be replace push with Redirect??\n        this.props.history.push(\"/login\");\n      }\n    }\n\n    if (!userId) {\n      console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\n    } else {\n      this.props.getUserProfile(userId);\n      this.props.getStatus(userId);\n    }\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.match.params.userId != prevProps.match.params.userId) {\n      this.refreshProfile();\n    }\n  }\n\n  componentWillUnmount() {}\n\n  render() {\n    return /*#__PURE__*/React.createElement(Profile, Object.assign({}, this.props, {\n      isOwner: !this.props.match.params.userId,\n      profile: this.props.profile,\n      status: this.props.status,\n      updateStatus: this.props.updateStatus,\n      savePhoto: this.props.savePhoto,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nlet mapStateToProps = state => {\n  //console.log('mapStateToProps PROFILE')\n  return {\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n  };\n};\n\nexport default compose(connect(mapStateToProps, {\n  getUserProfile,\n  getStatus,\n  updateStatus,\n  savePhoto,\n  saveProfile\n}), withRouter)(ProfileContainer);","map":{"version":3,"sources":["D:/react-way-of-samurai/src/components/Profile/ProfileContainer.tsx"],"names":["React","Profile","connect","getStatus","getUserProfile","savePhoto","saveProfile","updateStatus","withRouter","compose","ProfileContainer","Component","constructor","props","refreshProfile","userId","match","params","authorizedUserId","history","push","console","error","componentDidMount","componentDidUpdate","prevProps","prevState","componentWillUnmount","render","profile","status","mapStateToProps","state","profilePage","auth","isAuth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,SAAR,EAAmBC,cAAnB,EAAmCC,SAAnC,EAA8CC,WAA9C,EAA2DC,YAA3D,QAA8E,6BAA9E;AACA,SAAQC,UAAR,QAA8C,kBAA9C;AACA,SAAQC,OAAR,QAAsB,OAAtB;;AAmBA,MAAMC,gBAAN,SAA+BV,KAAK,CAACW,SAArC,CAA0D;AACtDC,EAAAA,WAAW,CAACC,KAAD,EAAmB;AAC1B,UAAMA,KAAN;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIC,MAAqB,GAAG,CAAC,KAAKF,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBF,MAArD;;AACA,QAAI,CAACA,MAAL,EAAa;AACTA,MAAAA,MAAM,GAAG,KAAKF,KAAL,CAAWK,gBAApB;;AACA,UAAI,CAACH,MAAL,EAAa;AACT;AACA,aAAKF,KAAL,CAAWM,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACH;AACJ;;AAED,QAAI,CAACL,MAAL,EAAa;AACTM,MAAAA,OAAO,CAACC,KAAR,CAAc,iEAAd;AACH,KAFD,MAEO;AACH,WAAKT,KAAL,CAAWT,cAAX,CAA0BW,MAA1B;AACA,WAAKF,KAAL,CAAWV,SAAX,CAAqBY,MAArB;AACH;AACJ;;AAEDQ,EAAAA,iBAAiB,GAAG;AAChB,SAAKT,cAAL;AACH;;AAEDU,EAAAA,kBAAkB,CAACC,SAAD,EAAuBC,SAAvB,EAA6C;AAC3D,QAAI,KAAKb,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBF,MAAxB,IAAkCU,SAAS,CAACT,KAAV,CAAgBC,MAAhB,CAAuBF,MAA7D,EAAqE;AACjE,WAAKD,cAAL;AACH;AACJ;;AAEDa,EAAAA,oBAAoB,GAAS,CAC5B;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBACI,oBAAC,OAAD,oBAAa,KAAKf,KAAlB;AACS,MAAA,OAAO,EAAE,CAAC,KAAKA,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBF,MAD3C;AAES,MAAA,OAAO,EAAE,KAAKF,KAAL,CAAWgB,OAF7B;AAGS,MAAA,MAAM,EAAE,KAAKhB,KAAL,CAAWiB,MAH5B;AAIS,MAAA,YAAY,EAAE,KAAKjB,KAAL,CAAWN,YAJlC;AAKS,MAAA,SAAS,EAAE,KAAKM,KAAL,CAAWR,SAL/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ;AAQH;;AA7CqD;;AAgD1D,IAAI0B,eAAe,GAAIC,KAAD,IAAyB;AAC3C;AACA,SAAQ;AACJH,IAAAA,OAAO,EAAEG,KAAK,CAACC,WAAN,CAAkBJ,OADvB;AAEJC,IAAAA,MAAM,EAAEE,KAAK,CAACC,WAAN,CAAkBH,MAFtB;AAGJZ,IAAAA,gBAAgB,EAAEc,KAAK,CAACE,IAAN,CAAWnB,MAHzB;AAIJoB,IAAAA,MAAM,EAAEH,KAAK,CAACE,IAAN,CAAWC;AAJf,GAAR;AAMH,CARD;;AAUA,eAAe1B,OAAO,CAClBP,OAAO,CAAC6B,eAAD,EAAkB;AAAC3B,EAAAA,cAAD;AAAiBD,EAAAA,SAAjB;AAA4BI,EAAAA,YAA5B;AAA0CF,EAAAA,SAA1C;AAAqDC,EAAAA;AAArD,CAAlB,CADW,EAElBE,UAFkB,CAAP,CAGbE,gBAHa,CAAf","sourcesContent":["import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {ProfileType} from '../../types/types';\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n    }\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                // todo: may be replace push with Redirect??\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    //console.log('mapStateToProps PROFILE')\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    })\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}