{"ast":null,"code":"import _slicedToArray from \"D:\\\\react-way-of-samurai\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\react-way-of-samurai\\\\src\\\\components\\\\common\\\\Paginator\\\\Paginator.js\";\n\nimport s from \"../../Users/Users.module.css\";\nimport React, { useEffect, useState } from \"react\";\nimport DialogItem from \"../../Dialogs/DialogItem/DialogItem\";\n/*export let Paginator = (props) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    let startOfBlock=1;\r\n    let endOfBlock=10;\r\n    let someBlock = pages.filter(item => item <= endOfBlock && item >= startOfBlock);\r\n    //{startOfBlock && <span>prv</span>}\r\n\r\n    return (\r\n        <div>\r\n            {startOfBlock!=1 && <span>Previous</span>}\r\n            {someBlock.map((d) => <span onClick={() => {props.onPageChanged(d)}}> {d} </span>)}\r\n            {endOfBlock!=pages.length && <span onClick={() => {props.onPageChanged(d)}}>Next</span>}\r\n        </div>\r\n    )*/\n\nvar Paginator = function Paginator(props) {\n  var pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\n  var pages = [];\n\n  for (var i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  } //alert(pages.length)\n  //let startOfBlock=1;\n  //let endOfBlock=10;\n\n\n  var _useState = useState(startOfBlock = 0),\n      _useState2 = _slicedToArray(_useState, 2),\n      startOfBlock = _useState2[0],\n      setStartOfBlock = _useState2[1];\n\n  var _useState3 = useState(endOfBlock = 10),\n      _useState4 = _slicedToArray(_useState3, 2),\n      endOfBlock = _useState4[0],\n      setEndOfBlock = _useState4[1];\n\n  var _useState5 = useState(someBlock = pages.filter(function (item) {\n    return item <= 0 && item >= 10;\n  })),\n      _useState6 = _slicedToArray(_useState5, 2),\n      someBlock = _useState6[0],\n      filter = _useState6[1]; //let someBlock = pages.filter(item => item <= endOfBlock && item >= startOfBlock);\n\n\n  useEffect(function () {\n    setStartOfBlock(props.startOfBlock);\n  }, [startOfBlock]);\n  /*  useEffect(()=>{\r\n        setEndOfBlock(props.endOfBlock)\r\n    },[props.endOfBlock])\r\n  */\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, startOfBlock != 1 && /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 37\n    }\n  }, \"Previous\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 18\n    }\n  }, someBlock = pages.filter(function (item) {\n    return item <= 0 && item >= 10;\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 18\n    }\n  }, someBlock.length), someBlock.map(function (d) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      onClick: function onClick() {\n        props.onPageChanged(d);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 39\n      }\n    }, \" \", d, \" \");\n  }), endOfBlock != pages.length && /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 46\n    }\n  }, \"Next\"));\n};\n\nexport default Paginator;\n/*\r\n\r\n\r\n    let mafs = () => {\r\n        for (let i = 1; i < pages.length; i++) {\r\n            if (props.currentPage == 1) return <div>\r\n            <span className={s.selectedPage} onClick={() => {\r\n                props.onPageChanged(i);\r\n            }}> {i} </span>\r\n                <span className={props.currentPage + 1 === i && s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(i + 1);\r\n                }}> {i + 1} </span>\r\n                <span>...</span>\r\n                <span className={pages.length === i && s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(pages.length);\r\n                }}>{pages.length}\r\n            </span>\r\n            </div>\r\n            if (props.currentPage == i) return <div><span className={props.currentPage - 1 === i && s.selectedPage}\r\n                                                          onClick={() => {\r\n                                                              props.onPageChanged(i - 1);\r\n                                                          }}> {i - 1} </span>\r\n                <span className={s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(i);\r\n                }}> {i} </span>\r\n                <span className={props.currentPage + 1 === i && s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(i + 1);\r\n                }}> {i + 1} </span>\r\n                <span>...</span>\r\n                <span className={pages.length === i && s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(pages.length);\r\n                }}>{pages.length}\r\n            </span></div>\r\n\r\n            if (props.currentPage == pages.length-1) return <div><span onClick={() => {\r\n                props.onPageChanged(1);\r\n            }}> {1} </span>\r\n                <span>...</span>\r\n                <span onClick={() => {\r\n                    props.onPageChanged(pages.length - 3);\r\n                }}> {pages.length - 2} </span>\r\n                <span className={s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(pages.length - 2);\r\n                }}> {pages.length - 1} </span>\r\n                <span onClick={() => {\r\n                    props.onPageChanged(pages.length);\r\n                }}> {pages.length}\r\n            </span></div>\r\n\r\n            if (props.currentPage == pages.length) return <div><span onClick={() => {\r\n                props.onPageChanged(1);\r\n            }}> {1} </span>\r\n                <span>...</span>\r\n                <span onClick={() => {\r\n                    props.onPageChanged(pages.length - 1);\r\n                }}> {pages.length - 1} </span>\r\n                <span className={s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(pages.length);\r\n                }}> {pages.length}\r\n            </span></div>\r\n        }\r\n    }\r\n\r\n\r\n}*/","map":{"version":3,"sources":["D:/react-way-of-samurai/src/components/common/Paginator/Paginator.js"],"names":["s","React","useEffect","useState","DialogItem","Paginator","props","pagesCount","Math","ceil","totalUsersCount","pageSize","pages","i","push","startOfBlock","setStartOfBlock","endOfBlock","setEndOfBlock","someBlock","filter","item","length","map","d","onPageChanged"],"mappings":";;;;;AAAA,OAAOA,CAAP,MAAc,8BAAd;AACA,OAAOC,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAW;AACzB,MAAIC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUH,KAAK,CAACI,eAAN,GAAwBJ,KAAK,CAACK,QAAxC,CAAjB;AACA,MAAIC,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIN,UAArB,EAAiCM,CAAC,EAAlC,EAAsC;AAClCD,IAAAA,KAAK,CAACE,IAAN,CAAWD,CAAX;AACH,GALwB,CAMzB;AACD;AACC;;;AARyB,kBAUaV,QAAQ,CAACY,YAAY,GAAC,CAAd,CAVrB;AAAA;AAAA,MAUpBA,YAVoB;AAAA,MAUNC,eAVM;;AAAA,mBAWSb,QAAQ,CAACc,UAAU,GAAC,EAAZ,CAXjB;AAAA;AAAA,MAWpBA,UAXoB;AAAA,MAWRC,aAXQ;;AAAA,mBAYFf,QAAQ,CAACgB,SAAS,GAACP,KAAK,CAACQ,MAAN,CAAa,UAAAC,IAAI;AAAA,WAAIA,IAAI,IAAI,CAAR,IAAaA,IAAI,IAAI,EAAzB;AAAA,GAAjB,CAAX,CAZN;AAAA;AAAA,MAYpBF,SAZoB;AAAA,MAYVC,MAZU,kBAazB;;;AACAlB,EAAAA,SAAS,CAAC,YAAI;AACVc,IAAAA,eAAe,CAACV,KAAK,CAACS,YAAP,CAAf;AACH,GAFQ,EAEP,CAACA,YAAD,CAFO,CAAT;AAIF;AACN;AACA;AACA;;AACQ,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,YAAY,IAAE,CAAd,iBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADxB,eAEK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMI,SAAS,GAACP,KAAK,CAACQ,MAAN,CAAa,UAAAC,IAAI;AAAA,WAAIA,IAAI,IAAI,CAAR,IAAaA,IAAI,IAAI,EAAzB;AAAA,GAAjB,CAAhB,CAFL,eAGK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMF,SAAS,CAACG,MAAhB,CAHL,EAIKH,SAAS,CAACI,GAAV,CAAc,UAACC,CAAD;AAAA,wBAAO;AAAM,MAAA,OAAO,EAAE,mBAAM;AAAClB,QAAAA,KAAK,CAACmB,aAAN,CAAoBD,CAApB;AAAuB,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAiDA,CAAjD,MAAP;AAAA,GAAd,CAJL,EAKKP,UAAU,IAAEL,KAAK,CAACU,MAAlB,iBAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALjC,CADJ;AASH,CA/BD;;AAgCA,eAAejB,SAAf;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import s from \"../../Users/Users.module.css\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport DialogItem from \"../../Dialogs/DialogItem/DialogItem\";\r\n\r\n\r\n/*export let Paginator = (props) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    let startOfBlock=1;\r\n    let endOfBlock=10;\r\n    let someBlock = pages.filter(item => item <= endOfBlock && item >= startOfBlock);\r\n    //{startOfBlock && <span>prv</span>}\r\n\r\n    return (\r\n        <div>\r\n            {startOfBlock!=1 && <span>Previous</span>}\r\n            {someBlock.map((d) => <span onClick={() => {props.onPageChanged(d)}}> {d} </span>)}\r\n            {endOfBlock!=pages.length && <span onClick={() => {props.onPageChanged(d)}}>Next</span>}\r\n        </div>\r\n    )*/\r\n    const Paginator = (props) => {\r\n        let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n        let pages = [];\r\n        for (let i = 1; i <= pagesCount; i++) {\r\n            pages.push(i)\r\n        }\r\n        //alert(pages.length)\r\n       //let startOfBlock=1;\r\n        //let endOfBlock=10;\r\n\r\n        let [startOfBlock, setStartOfBlock] = useState(startOfBlock=0)\r\n        let [endOfBlock, setEndOfBlock] = useState(endOfBlock=10)\r\n        let [someBlock,filter]=useState(someBlock=pages.filter(item => item <= 0 && item >= 10))\r\n        //let someBlock = pages.filter(item => item <= endOfBlock && item >= startOfBlock);\r\n        useEffect(()=>{\r\n            setStartOfBlock(props.startOfBlock)\r\n        },[startOfBlock])\r\n\r\n      /*  useEffect(()=>{\r\n            setEndOfBlock(props.endOfBlock)\r\n        },[props.endOfBlock])\r\n*/\r\n        return (\r\n            <div>\r\n                {startOfBlock!=1 && <span>Previous</span>}\r\n                {<div>{someBlock=pages.filter(item => item <= 0 && item >= 10)}</div>}\r\n                {<div>{someBlock.length}</div>}\r\n                {someBlock.map((d) => <span onClick={() => {props.onPageChanged(d)}}> {d} </span>)}\r\n                {endOfBlock!=pages.length && <span>Next</span>}\r\n            </div>\r\n        )\r\n    }\r\n    export default Paginator;\r\n/*\r\n\r\n\r\n    let mafs = () => {\r\n        for (let i = 1; i < pages.length; i++) {\r\n            if (props.currentPage == 1) return <div>\r\n            <span className={s.selectedPage} onClick={() => {\r\n                props.onPageChanged(i);\r\n            }}> {i} </span>\r\n                <span className={props.currentPage + 1 === i && s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(i + 1);\r\n                }}> {i + 1} </span>\r\n                <span>...</span>\r\n                <span className={pages.length === i && s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(pages.length);\r\n                }}>{pages.length}\r\n            </span>\r\n            </div>\r\n            if (props.currentPage == i) return <div><span className={props.currentPage - 1 === i && s.selectedPage}\r\n                                                          onClick={() => {\r\n                                                              props.onPageChanged(i - 1);\r\n                                                          }}> {i - 1} </span>\r\n                <span className={s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(i);\r\n                }}> {i} </span>\r\n                <span className={props.currentPage + 1 === i && s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(i + 1);\r\n                }}> {i + 1} </span>\r\n                <span>...</span>\r\n                <span className={pages.length === i && s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(pages.length);\r\n                }}>{pages.length}\r\n            </span></div>\r\n\r\n            if (props.currentPage == pages.length-1) return <div><span onClick={() => {\r\n                props.onPageChanged(1);\r\n            }}> {1} </span>\r\n                <span>...</span>\r\n                <span onClick={() => {\r\n                    props.onPageChanged(pages.length - 3);\r\n                }}> {pages.length - 2} </span>\r\n                <span className={s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(pages.length - 2);\r\n                }}> {pages.length - 1} </span>\r\n                <span onClick={() => {\r\n                    props.onPageChanged(pages.length);\r\n                }}> {pages.length}\r\n            </span></div>\r\n\r\n            if (props.currentPage == pages.length) return <div><span onClick={() => {\r\n                props.onPageChanged(1);\r\n            }}> {1} </span>\r\n                <span>...</span>\r\n                <span onClick={() => {\r\n                    props.onPageChanged(pages.length - 1);\r\n                }}> {pages.length - 1} </span>\r\n                <span className={s.selectedPage} onClick={() => {\r\n                    props.onPageChanged(pages.length);\r\n                }}> {pages.length}\r\n            </span></div>\r\n        }\r\n    }\r\n\r\n\r\n}*/"]},"metadata":{},"sourceType":"module"}