{"version":3,"sources":["redux/profileReducer.ts","hoc/withAuthRedirect.js","api/api.ts","redux/dialogsReducer.ts","components/Navbar/Sidebar/Sidebar.module.css","components/Navbar/Sidebar/Sidebarfriends/Sidebarfriends.module.css","components/Dialogs/DialogItem/Avatar/Avatar.module.css","asets/svg/Double Ring-2.2s-200px.svg","components/common/Error/Error404.module.css","asets/svg/868843.svg","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Navbar/Navbar.module.css","components/common/FormControls/FormControls.tsx","utils/validators/validators.ts","redux/authReducer.ts","components/Users/Users.module.css","redux/sidebarReducer.ts","components/Navbar/Sidebar/Sidebarfriends/Sidebarfriends.jsx","components/Navbar/Sidebar/Sidebar.jsx","components/Navbar/Sidebar/SidebarContainer.jsx","components/Navbar/Navbar.jsx","components/Settings/Settings.jsx","components/News/News.jsx","utils/objectsHelpers.js","redux/usersReducer.ts","components/common/Paginator/Paginator.tsx","components/Users/User.jsx","components/Users/Users.tsx","redux/usersSelectors.ts","components/Users/UsersContainer.tsx","components/Music/Music.jsx","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","components/Login/Login.tsx","redux/reduxstore.ts","hoc/withSuspense.js","components/common/Error/Error404.jsx","App.js","serviceWorker.js","index.js","components/Dialogs/Dialogs.module.css","components/Header/Header.module.css","redux/appReducer.ts","components/common/FormControls/FormControls.module.css","components/common/Preloader/Preloader.jsx","components/common/Paginator/Paginator.module.css","asets/images/instami-avatarka-v-instagram-9.png","components/Dialogs/DialogItem/Avatar/Avatar.jsx","components/Dialogs/DialogItem/DialogItem.jsx"],"names":["initialState","posts","id","post","likesCount","profile","status","newPostText","profileReducer","state","action","type","newPost","text","stateCopy","push","filter","p","postId","photos","large","small","aboutMe","contacts","lookingForAJob","lookingForAJobDescription","addPostActionCreator","setStatus","updateProfile","getUserProfile","userId","dispatch","a","profileAPI","getUser","data","getStatus","updateStatus","resultCode","thunkLetError","messages","savePhoto","file","r","sendForm","fullName","github","vk","facebook","instagram","twitter","website","youtube","mainLink","formData","undefined","stopSubmit","_error","Promise","reject","mapStateToPropsForRedirect","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","ResultCodesEnum","ResultCodeForCaptcha","instance","axios","create","withCredentials","baseURL","headers","userAPI","getUsers","currentPage","pageSize","get","then","response","followAPI","deleteUser","delete","postUser","authAPI","authMe","login","email","password","rememberMe","captcha","logout","put","photoFile","FormData","append","securityAPI","getCaptchaURL","message","newMessageText","dialogs","name","ava","dialogsReducer","addMessageActionCreator","module","exports","Message","className","s","maxLength20","maxLengthCreator","MessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","Dialogs","dialogElements","map","d","DialogItem","key","messageElements","m","dialogsItems","addDialog","messageText","input","meta","touched","error","hasError","formControlError","Input","CreateField","placeholder","CreateFieldForProfile","value","maxLength","length","smallPhoto","captchaUrl","authReducer","setAuthUserData","setUserSmallPhoto","LoginAC","Success","CaptchaIsRequired","getCaptchaUrl","url","LogoutAC","friends","getRandomArbitrary","min","max","rand","Math","random","round","i","splice","Sidebarfriends","avatar","src","Sidebar","window","onload","addFriends","threefriends","wrapper","SidebarContainer","sidebar","Navbar","nav","item","activeClassName","activeLink","active","Settings","News","updateObjectArray","items","itemId","objPropName","newObjProps","u","users","totalUsersCount","numberChange","isFetching","followingInProgress","follow","unFollow","setUsers","setTotalUsersCount","totalCount","onNumberChange","number","toggleIsFetching","toggleIsFetchingProgress","_followUnFollowFlow","apiMethod","actionCreator","Paginator","pagesCount","ceil","pages","useState","startOfBlock","setStartOfBlock","endOfBlock","setEndOfBlock","someBlock","editSomeBlock","maxLength4","SearchPageForm","onClick","newPages","notActive","onPageChanged","current","initialValues","searchPage","User","user","margin","photo","userPhoto","city","button","followed","disabled","some","country","Users","usersPage","getUsersSuperSelector","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getNumberChange","getIsFetching","getFollowingInProgress","UsersAPIComponent","pageNumber","setCurrentPage","requestUsers","e","target","searchNumber","Preloader","pageTitle","compose","getState","bind","Music","Header","header","loginBlock","HeaderContainer","LoginReduxForm","formSummmayError","Login","console","log","rootReducer","combineReducers","profilePage","dialogsPage","formReducer","app","appReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","fallback","Error404","DialogsContainer","lazy","ProfileContainer","App","catchAllUnhandledErrors","reason","initializeApp","addEventListener","removeEventListener","initialized","exact","path","render","UsersContainer","globalError","AppContainer","withRouter","letError","SamuraiJSApp","basename","process","env","PUBLIC_URL","Boolean","location","hostname","match","ReactDOM","document","getElementById","ER","setTimeout","preloader","Avatar","dialog"],"mappings":"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","file":"static/js/main.87f684f8.chunk.js","sourcesContent":["import {authAPI, profileAPI} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostsType, ProfileType} from \"../types/types\";\r\nimport {SetAuthUserDataType, SetUserSmallPhotoType} from \"./authReducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./reduxstore\";\r\nimport {letErrorActionType, thunkLetError} from \"./appReducer\";\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst SET_USER_PROFILE = \"SET-USER-PROFILE\";\r\nconst SET_STATUS = \"SET-STATUS\";\r\nconst DELETE_POST = \"DELETE-POST\";\r\nconst SAVE_PHOTO_SUCCESS = \"SAVE-PHOTO-SUCCESS\";\r\nconst UPDATE_PROFILE = \"UPDATE-PROFILE\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, post: 'hi, how are you', likesCount: 1},\r\n        {id: 2, post: 'It`s my first post', likesCount: 2},\r\n    ]as Array<PostsType>,\r\n    profile: null as ProfileType| null,\r\n    status: \"\" as string,\r\n    newPostText: '',\r\n};\r\nexport type initialStateType = typeof initialState;\r\n\r\nexport const profileReducer = (state = initialState, action: ActionsTypes):initialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 3,\r\n                post: action.text,\r\n                likesCount: 0,\r\n            }\r\n            let stateCopy = {...state};\r\n            stateCopy.posts = [...state.posts];\r\n            stateCopy.posts.push(newPost);\r\n            return stateCopy;\r\n        }\r\n        case DELETE_POST: {\r\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case SET_STATUS: {\r\n            return {...state, status: action.status}\r\n        }\r\n        case SAVE_PHOTO_SUCCESS: {\r\n            return {...state, profile: {...state.profile, photos:{...state.profile?.photos, large:action.large,\r\n                    small:action.small} } as ProfileType}\r\n        }\r\n        case UPDATE_PROFILE: {\r\n            return {...state, profile: {...state.profile, aboutMe:action.aboutMe,\r\n                                        contacts: action.contacts, lookingForAJob: action.lookingForAJob,\r\n                                        lookingForAJobDescription:action.lookingForAJobDescription} as ProfileType}\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n    return state;\r\n}\r\ntype ActionsTypes =AddPostActionCreatorType| DeletePostType|SetStatusType|SetUserProfileType|UpdateProfileType|\r\n    SavePhotoSuccessType| letErrorActionType;\r\ntype AddPostActionCreatorType = {\r\n    type: typeof ADD_POST;\r\n    text: string;\r\n}\r\n\r\nexport const addPostActionCreator = (text: string):AddPostActionCreatorType => {\r\n    return {\r\n        type: ADD_POST,\r\n        text,\r\n    }\r\n};\r\ntype DeletePostType = {\r\n    type: typeof DELETE_POST;\r\n    postId: number;\r\n}\r\nexport const deletePost = (postId: number): DeletePostType => {\r\n    return {type: DELETE_POST, postId}\r\n};\r\ntype SetStatusType = {\r\n    type: typeof SET_STATUS;\r\n    status: string;\r\n}\r\nexport const setStatus = (status: string): SetStatusType => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status: status,\r\n    }\r\n};\r\ntype SetUserProfileType = {\r\n    type: typeof SET_USER_PROFILE;\r\n    profile: ProfileType;\r\n}\r\nconst setUserProfile = (profile: ProfileType): SetUserProfileType => { //////////////////////////////////////////any\r\n    return {type: SET_USER_PROFILE, profile}\r\n};\r\n\r\ntype UpdateProfileType = {\r\n    type: typeof UPDATE_PROFILE;\r\n    aboutMe: string;\r\n    contacts:{\r\n        github: string;\r\n        vk: string;\r\n        facebook: string;\r\n        instagram: string;\r\n        twitter: string;\r\n        website: string;\r\n        youtube: string;\r\n        mainLink: string;\r\n    };\r\n    lookingForAJobDescription: string;\r\n    lookingForAJob: boolean;\r\n    photos:{\r\n        small: null | string,\r\n        large: null| string,\r\n    }\r\n}\r\ntype UpdateProfileTypeWithoutPhoto = {\r\n    type: typeof UPDATE_PROFILE;\r\n    aboutMe: string;\r\n    contacts:{\r\n        github: string;\r\n        vk: string;\r\n        facebook: string;\r\n        instagram: string;\r\n        twitter: string;\r\n        website: string;\r\n        youtube: string;\r\n        mainLink: string;\r\n    };\r\n    lookingForAJobDescription: string;\r\n    lookingForAJob: boolean;\r\n}\r\nconst updateProfile = (aboutMe: string,\r\n                       contacts:{\r\n                           github: string;\r\n                           vk: string;\r\n                           facebook: string;\r\n                           instagram: string;\r\n                           twitter: string;\r\n                           website: string;\r\n                           youtube: string;\r\n                           mainLink: string;\r\n                       },\r\n                       lookingForAJobDescription: string,\r\n                       lookingForAJob: boolean):  UpdateProfileTypeWithoutPhoto => {\r\n    return {type: UPDATE_PROFILE, aboutMe, contacts, lookingForAJobDescription, lookingForAJob}\r\n};\r\ntype SavePhotoSuccessType = {\r\n    type: typeof SAVE_PHOTO_SUCCESS;\r\n    small: string| null;\r\n    large:string| null;\r\n}\r\nconst savePhotoSuccess = (small:string | null, large:string| null): SavePhotoSuccessType => {\r\n    debugger\r\n    return {type: SAVE_PHOTO_SUCCESS, small, large}\r\n};\r\n\r\ntype CurrentDispatchType = Dispatch<ActionsTypes>;\r\ntype ThunkActionType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes | FormAction>;\r\n\r\n\r\nexport const getUserProfile = (userId: number): ThunkActionType => async (dispatch) => {\r\n    let data = await profileAPI.getUser(userId)\r\n    dispatch(setUserProfile(data));\r\n}\r\nexport const getStatus = (userId: number): ThunkActionType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    if (data == null || data == \"\") dispatch(setStatus('У меня нет статуса'));\r\n    else dispatch(setStatus(data));\r\n}\r\nexport const updateStatus = (status: string): ThunkActionType => async (dispatch) => {\r\n\r\n        let data = await profileAPI.updateStatus(status)\r\n        if (data.resultCode == 0) {\r\n            dispatch(setStatus(status));\r\n        }\r\n        if (data.resultCode !== 0){\r\n\r\n            dispatch(thunkLetError(`${data.messages[0]}`))\r\n        }\r\n}\r\n\r\nexport const savePhoto = (file: any): ThunkActionType => async (dispatch) => {\r\n    debugger\r\n    let r = await profileAPI.savePhoto(file)\r\n    debugger\r\n    if (r.resultCode==0) {\r\n        debugger\r\n        dispatch(savePhotoSuccess(r.data.photos.small, r.data.photos.large));\r\n    }\r\n}\r\n\r\nexport const sendForm = (aboutMe: string,\r\n                         fullName: string,\r\n                         github: string,\r\n                         vk: string,\r\n                         facebook: string,\r\n                         instagram: string,\r\n                         twitter: string,\r\n                         website: string,\r\n                         youtube: string,\r\n                         mainLink: string,\r\n                         lookingForAJobDescription: string,\r\n                         lookingForAJob: boolean): ThunkActionType => async (dispatch) => {\r\n    lookingForAJob==undefined ? lookingForAJob=false : lookingForAJob=true\r\n    let formData = {\r\n        aboutMe: aboutMe,\r\n            contacts: {\r\n            github: github,\r\n            vk: vk,\r\n            facebook: facebook,\r\n            instagram: instagram,\r\n            twitter: twitter,\r\n            website: website,\r\n            youtube: youtube,\r\n            mainLink: mainLink,\r\n        },\r\n        lookingForAJob: lookingForAJob,\r\n        lookingForAJobDescription: lookingForAJobDescription,\r\n        fullName: fullName,\r\n        userId: 12090,\r\n    }\r\n    let contacts= {\r\n            github: github,\r\n            vk: vk,\r\n            facebook: facebook,\r\n            instagram: instagram,\r\n            twitter: twitter,\r\n            website: website,\r\n            youtube: youtube,\r\n            mainLink: mainLink,\r\n        };\r\n    //dispatch (updateProfile(aboutMe, contacts, lookingForAJobDescription, lookingForAJob))\r\n    let data = await profileAPI.formData(formData);\r\n    if (data.resultCode == 0) dispatch (updateProfile(aboutMe, contacts, lookingForAJobDescription, lookingForAJob))\r\n    else {\r\n        dispatch(stopSubmit('profeleData', {_error: data.messages[0]}));\r\n       return Promise.reject(data.messages[0]);\r\n    }\r\n\r\n\r\n};\r\n","import {Redirect} from \"react-router-dom\";\r\nimport React from 'react';\r\nimport Dialogs from \"../components/Dialogs/Dialogs\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect=(state)=>({\r\n    isAuth:state.auth.isAuth,\r\n});\r\nexport const withAuthRedirect=(Component)=>{\r\n    class RedirectComponent extends React.Component{\r\n        render(){\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent=connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","import axios, {AxiosResponse} from \"axios\";\r\nimport {FormDataType, GetUserType} from \"../types/types\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"aec09892-749d-4c42-b208-544b7f308b49\"\r\n    },\r\n});\r\n\r\nexport const userAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    }\r\n}\r\nexport const followAPI = {\r\n    deleteUser(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n    postUser(id: number) {\r\n        return instance.post(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10,\r\n}\r\n\r\ntype AuthMeType = {\r\n    resultCode: number,\r\n    messages: Array<string>,\r\n    data: {\r\n        id: number,\r\n        email: string,\r\n        login: string\r\n    }\r\n}\r\ntype LoginType = {\r\n    resultCode: number,\r\n    messages: Array<string>,\r\n    data: {\r\n        userId: number,\r\n    }\r\n}\r\ntype logoutType = {\r\n    resultCode: number,\r\n    messages: Array<string>,\r\n    data: {}\r\n}\r\n\r\nexport const authAPI = {\r\n    authMe() {\r\n        return instance.get<AuthMeType>(`auth/me`)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n    login(email: string,\r\n          password: string,\r\n          rememberMe = false,\r\n          captcha: string | null = null) {\r\n        return instance.post<LoginType>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n    logout() {\r\n        return instance.delete<logoutType>(`auth/login`)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    }\r\n}\r\ntype updateStatus = {\r\n    resultCode: number,\r\n    messages: Array<string>,\r\n    data: { status: string }\r\n}\r\ntype savePhotoType = {\r\n    resultCode: number,\r\n    messages: Array<string>,\r\n    data: {\r\n        photos: {\r\n            small: string | null,\r\n            large: string | null,\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const profileAPI = {\r\n    getUser(userId: number) {\r\n        return instance.get<GetUserType>(`profile/` + userId)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<updateStatus>(`profile/status/`, {status: status})\r\n            .then(response => {\r\n                    return response.data\r\n                }\r\n            );\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put<savePhotoType>(`/profile/photo`, formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        }).then(response => {\r\n                return response.data\r\n            }\r\n        );\r\n    },\r\n\r\n    formData(formData: FormDataType) {\r\n        return instance.put(`/profile`, formData)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n}\r\nexport const securityAPI = {\r\n    getCaptchaURL() {\r\n        return instance.get(`security/get-captcha-url`)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n}","import {SetAuthUserDataType, SetUserSmallPhotoType} from \"./authReducer\";\r\n\r\nconst ADD_MESSAGE = \"ADD-MESSAGE\";\r\ntype addMessageActionCreatorType={\r\n    type: typeof ADD_MESSAGE;\r\n    text: string;\r\n}\r\ntype MessageType={\r\n    id: number,\r\n    message: string | null,\r\n}\r\ntype DialogType={\r\n    id: number | null,\r\n    name: string | null,\r\n    ava: string | null,\r\n}\r\nlet initialState = {\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your it-kamasutra?'},\r\n        {id: 3, message: 'Yo'},\r\n    ] as Array<MessageType>,\r\n    newMessageText: \"\" as string,\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: 'Dimych',\r\n            ava: \"https://s00.yaplakal.com/pics/pics_original/9/9/2/15045299.jpg\"\r\n        },\r\n        {id: 2, name: 'Andrey', ava: \"https://klike.net/uploads/posts/2018-06/1528720172_1.jpg\"},\r\n        {id: 3, name: 'Sveta', ava: \"https://klike.net/uploads/posts/2018-06/1528720227_2.png\"},\r\n        {id: 4, name: 'Sasha', ava: \"https://klike.net/uploads/posts/2018-06/1528720246_5.jpg\"},\r\n        {id: 5, name: 'Viktor', ava: \"https://klike.net/uploads/posts/2018-06/1528720305_6.jpg\"},\r\n        {id: 6, name: 'Valera', ava: \"https://klike.net/uploads/posts/2018-06/1528720257_8.jpg\"},\r\n        {\r\n            id: 7,\r\n            name: 'Sergey',\r\n            ava: \"https://klike.net/uploads/posts/2020-06/1591514917_7.jpg\"\r\n        },\r\n        {\r\n            id: 8,\r\n            name: 'Dimon',\r\n            ava: \"https://vjoy.cc/wp-content/uploads/2019/12/screenshot_3-min-13-640x570-1.png\"\r\n        },\r\n    ]as Array<DialogType>,\r\n};\r\nexport type initialStateType = typeof initialState;\r\n\r\nexport const dialogsReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n    //let stateCopy= JSON.parse(JSON.stringify(state))\r\n    switch (action.type) {\r\n        case ADD_MESSAGE: {\r\n            return {\r\n                ...state,\r\n                newMessageText: '',\r\n                messages: [...state.messages, {id: 4, message: action.text}]\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\ntype ActionsTypes =addMessageActionCreatorType;\r\n\r\nexport const addMessageActionCreator = (text: string):addMessageActionCreatorType => {\r\n    return {\r\n        type: ADD_MESSAGE,\r\n        text,\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Sidebar_wrapper__SDCfj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Sidebarfriends_avatar__1GGru\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Avatar_avatar__4PJvH\"};","module.exports = __webpack_public_path__ + \"static/media/Double Ring-2.2s-200px.1a5e1cfb.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Error404_error__3K_OV\"};","module.exports = __webpack_public_path__ + \"static/media/868843.6d8e81ad.svg\";","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\nimport {Textarea} from \"../common/FormControls/FormControls\";\r\nconst maxLength20 = maxLengthCreator(20)\r\nconst MessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'messageText'} validate={[requiredField, maxLength20]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst MessageReduxForm = reduxForm({\r\n    form: \"message\"\r\n})(MessageForm)\r\nconst Dialogs = (props) => {\r\n    const onSubmit=(formData)=>{\r\n        props.addDialog(formData.messageText);\r\n    }\r\n    let dialogElements = props.state.dialogs.map((d) => <DialogItem name={d.name} id={d.id} key={d.id} ava={d.ava}/>)\r\n    let messageElements = props.state.messages.map((m) => <Message message={m.message} key={m.id}/>)\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messageElements}\r\n                < MessageReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3LCZV\",\"item\":\"Navbar_item__r53jG\",\"activeLink\":\"Navbar_activeLink__xML_-\",\"error\":\"Navbar_error__1vUJu\"};","import React from \"react\";\r\nimport s from './FormControls.module.css';\r\nimport {FieldValidatorType, requiredField} from \"../../../utils/validators/validators\";\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {ftruncate} from \"fs\";\r\n\r\nconst Textarea: React.FC<FormControlPropsType> =(props)=>{\r\n    const {input, meta: {touched, error}, hasError= touched && error}=props;\r\n   // hasError = touched && error\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea {...input} {...props} className={hasError ? s.formControlError : \"\"}/>\r\n            </div>\r\n            {hasError && <span className={s.error}>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\ntype FormControlPropsType={\r\n    meta: WrappedFieldMetaProps\r\n    input: any;\r\n    hasError:boolean;\r\n}\r\nconst Input: React.FC<FormControlPropsType> =(props)=>{\r\n    const {input, meta: {touched, error}, hasError= touched && error}=props;\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <input {...input} {...props} className={hasError ? s.formControlError : \"\"}/>\r\n                </div>\r\n                {hasError && <span className={s.error}>{error}</span>}\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n\r\ntype CreateFieldType = {\r\n    // placeholder:\r\n}\r\nconst CreateField = (placeholder: string | null,\r\n                     name: string,\r\n                     validate: Array<FieldValidatorType> | null,\r\n                     component: React.Component | string | React.FC<FormControlPropsType>,\r\n                     props={},\r\n                     type?: string,\r\n                     text = \"\") => {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder ? placeholder : ''}\r\n                   component={component}\r\n                   name={name}\r\n                   validate={validate}\r\n                   type={type}\r\n            />{text}\r\n        </div>\r\n    )\r\n}\r\nconst CreateFieldForProfile = (placeholder: string | null,\r\n                               name: string,\r\n                               validate: Array<string>,\r\n                               component: () => void,\r\n                               type: string,\r\n                               text = \"\",\r\n                               value: string) => {\r\n    return (\r\n        <span>\r\n            <Field placeholder={placeholder ? placeholder : ''}\r\n                   component={component}\r\n                   name={name}\r\n                   validate={validate}\r\n                   type={type}\r\n                   value={value}\r\n            />{text}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport {Textarea, Input, CreateField, CreateFieldForProfile}\r\n\r\n","export type FieldValidatorType=(value:string)=>undefined| string;\r\n//export type fieldMaxLengthCreator=(maxLength: number)=>(value: string)=>undefined| string;\r\n\r\nexport const requiredField: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator=(maxLength: number):FieldValidatorType=>(value)=>{\r\n    if (value.length>maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n};","import {authAPI, profileAPI, ResultCodeForCaptcha, ResultCodesEnum, securityAPI} from \"../api/api\";\r\n\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./reduxstore\";\r\n\r\nconst SET_USER_DATA = \"auth/SET-USER-DATA\";\r\nconst SET_USER_SMALL_PHOTO = \"auth/SET-USER-SMALL-PHOTO\";\r\nconst GET_CAPTCHA_URL_SUCCESS = \"GET-CAPTCHA-URL-SUCCESS\";\r\n\r\ntype InitialStateType = {\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean,\r\n    smallPhoto: string | null,\r\n    captchaUrl: string | null,\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    smallPhoto: null,\r\n    captchaUrl: null,\r\n};\r\n\r\nexport const authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            }\r\n        case SET_USER_SMALL_PHOTO:\r\n            return {\r\n                ...state,\r\n                smallPhoto: action.smallPhoto,\r\n            }\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                captchaUrl: action.captchaUrl,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsTypes =SetAuthUserDataType| GetCaptchaUrlSuccessType| SetUserSmallPhotoType;\r\n\r\nexport type SetAuthUserDataType = {\r\n    type: typeof SET_USER_DATA;\r\n    data: {\r\n        userId: number| null;\r\n        email: string| null;\r\n        login: string| null;\r\n        isAuth: boolean;\r\n    }\r\n}\r\nexport const setAuthUserData = (userId: number| null, email: string| null, login: string| null, isAuth: boolean): SetAuthUserDataType => {\r\n    return {type: SET_USER_DATA, data: {userId, email, login, isAuth}}\r\n};\r\ntype GetCaptchaUrlSuccessType = {\r\n    type: typeof GET_CAPTCHA_URL_SUCCESS;\r\n    captchaUrl: string;\r\n}\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessType => {\r\n    return {type: GET_CAPTCHA_URL_SUCCESS, captchaUrl}\r\n};\r\nexport type SetUserSmallPhotoType = {\r\n    type: typeof SET_USER_SMALL_PHOTO;\r\n    smallPhoto: string;\r\n}\r\nexport const setUserSmallPhoto = (smallPhoto: string ): SetUserSmallPhotoType => {\r\n    return {type: SET_USER_SMALL_PHOTO, smallPhoto}\r\n};\r\n\r\ntype firstDataType = {\r\n    resultCode: number;\r\n    data: {\r\n        id: number;\r\n        login: string;\r\n        email: string;\r\n    }\r\n}\r\ntype secondDataType = {\r\n    photos: {\r\n        small:string;\r\n    };\r\n}\r\ntype thirdDataType = {\r\n     resultCode: number;\r\n}\r\n\r\n\r\ntype CurrentDispatchType = Dispatch<ActionsTypes>;\r\ntype ThunkActionType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>;\r\nexport const authMe = () => (dispatch: CurrentDispatchType) => {\r\n    let id: number;\r\n    let login: string;\r\n    let email: string;\r\n    authAPI.authMe().then((data: firstDataType) => {\r\n        if (data.resultCode == ResultCodesEnum.Success) {\r\n            id = data.data.id;\r\n            login = data.data.login;\r\n            email = data.data.email;\r\n            dispatch(setAuthUserData(id, email, login, true));\r\n        }\r\n    }).then(() => {\r\n        profileAPI.getUser(id).then((data: secondDataType) => {\r\n            dispatch(setUserSmallPhoto(data.photos.small));\r\n        })\r\n    })\r\n};\r\nexport const LoginAC = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkActionType  => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (data.resultCode == 0) dispatch(authMe());\r\n\r\n    else {\r\n        if (data.resultCode == ResultCodeForCaptcha.CaptchaIsRequired) {\r\n            await dispatch(getCaptchaUrl())\r\n        }\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"some error\";\r\n        await dispatch(<SetAuthUserDataType | GetCaptchaUrlSuccessType | SetUserSmallPhotoType>stopSubmit('login', {_error: message}));\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = () => async (dispatch: CurrentDispatchType) => {\r\n    let response = await securityAPI.getCaptchaURL();\r\n    let captcha = response.url;\r\n    dispatch(getCaptchaUrlSuccess(captcha));\r\n};\r\n\r\nexport const LogoutAC = () => async (dispatch:CurrentDispatchType) => {\r\n    await authAPI.logout().then((data: thirdDataType) => {\r\n        if (data.resultCode == 0) dispatch(setAuthUserData(null, null, null, false));\r\n    });\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__-wuiL\",\"name\":\"Users_name__2bmY7\",\"button\":\"Users_button__2N4oX\",\"status\":\"Users_status__RtvUu\",\"photo\":\"Users_photo__1F6QW\",\"city\":\"Users_city__HEX6h\",\"country\":\"Users_country__BhW2t\",\"wrapper\":\"Users_wrapper__2vPFF\",\"selectedPage\":\"Users_selectedPage__eiYT-\"};","import {letErrorActionType} from \"./appReducer\";\r\n\r\nconst ADD_THREE_FRIENDS = \"ADD-THREE-FRIENDS\";\r\ntype FriendsType={\r\n    id: number | null,\r\n    name: string | null,\r\n    ava: string | null,\r\n}\r\nlet initialState= {\r\n    friends: [\r\n        {\r\n            id: 1,\r\n            name: 'Dimych',\r\n            ava: \"https://s00.yaplakal.com/pics/pics_original/9/9/2/15045299.jpg\"\r\n        },\r\n        {id: 2, name: 'Andrey', ava: \"https://klike.net/uploads/posts/2018-06/1528720172_1.jpg\"},\r\n        {id: 3, name: 'Sveta', ava: \"https://klike.net/uploads/posts/2018-06/1528720227_2.png\"},\r\n        {id: 4, name: 'Sasha', ava: \"https://klike.net/uploads/posts/2018-06/1528720246_5.jpg\"},\r\n        {id: 5, name: 'Viktor', ava: \"https://klike.net/uploads/posts/2018-06/1528720305_6.jpg\"},\r\n        {id: 6, name: 'Valera', ava: \"https://klike.net/uploads/posts/2018-06/1528720257_8.jpg\"},\r\n        {\r\n            id: 7,\r\n            name: 'Sergey',\r\n            ava: \"https://klike.net/uploads/posts/2020-06/1591514917_7.jpg\"\r\n        },\r\n        {\r\n            id: 8,\r\n            name: 'Dimon',\r\n            ava: \"https://vjoy.cc/wp-content/uploads/2019/12/screenshot_3-min-13-640x570-1.png\"\r\n        },\r\n    ]as Array<FriendsType>,\r\n};\r\nexport type initialStateType = typeof initialState;\r\n\r\nfunction getRandomArbitrary(min: number, max: number) {\r\n    let rand = min - 0.5 + Math.random() * (max - min + 1);\r\n    return Math.round(rand);\r\n}\r\n\r\nfor (let i = initialState.friends.length; i > 3; i--) {\r\n    initialState.friends.splice(getRandomArbitrary(0, initialState.friends.length - 1), 1);\r\n}\r\n\r\nexport const sidebarReducer = (state=initialState, action: ActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case ADD_THREE_FRIENDS: {\r\n            return state;\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\ntype ActionsTypes =AddThreeFriendsActionCreatorType;\r\n\r\ntype AddThreeFriendsActionCreatorType = {\r\n    type: typeof ADD_THREE_FRIENDS;\r\n}\r\nexport const addThreeFriendsActionCreator = ():AddThreeFriendsActionCreatorType => {\r\n    return {\r\n        type: ADD_THREE_FRIENDS,\r\n    }\r\n}\r\n","import React from 'react';\r\nimport s from './Sidebarfriends.module.css';\r\n\r\nconst Sidebarfriends = (props) => {\r\n    return (\r\n        <div className={s.avatar}>\r\n            <img src={props.ava}/>\r\n            <div>{props.name}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebarfriends;","import React from 'react';\r\nimport s from './Sidebar.module.css';\r\nimport Sidebarfriends from \"./Sidebarfriends/Sidebarfriends\";\r\nimport DialogItem from \"../../Dialogs/DialogItem/DialogItem\";\r\n\r\nconst Sidebar = (props) => {\r\n\r\n    window.onload=()=>{props.addFriends()}\r\n    let threefriends = props.threefriends.map((d) => <Sidebarfriends name={d.name} key={d.id}  ava={d.ava}/>)\r\n\r\n    return (\r\n        <div>\r\n           FRIENDS\r\n\r\n            <div className={s.wrapper}>\r\n                {threefriends}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\r\nimport {addThreeFriendsActionCreator} from \"../../../redux/sidebarReducer\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps=(state)=>{\r\n    return{\r\n        threefriends: state.sidebar.friends,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps=(dispatch)=>{\r\n    return{\r\n        addFriends:()=>{dispatch(addThreeFriendsActionCreator())},\r\n    }\r\n}\r\nconst SidebarContainer=connect(mapStateToProps, mapDispatchToProps)(Sidebar);\r\n\r\nexport default SidebarContainer;","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport SidebarContainer from \"./Sidebar/SidebarContainer\";\r\n\r\n\r\n\r\nconst Navbar = (props) => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={`${s.active} ${s.item}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <SidebarContainer />\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport s from './Settings.module.css';\r\n\r\nconst Settings = (props) => {\r\n    return (\r\n        <div>\r\n        Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport s from './News.module.css';\r\n\r\nconst News = (props) => {\r\n    return (\r\n        <div>\r\n        News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","export const updateObjectArray=(items, itemId, objPropName, newObjProps)=> {\r\n    return items.map(u => {\r\n        if (u.objPropName === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {followAPI, userAPI} from \"../api/api\";\r\nimport {updateObjectArray} from \"../utils/objectsHelpers\";\r\nimport {PhotosType, UsersType} from \"../types/types\";\r\nimport {AppStateType} from \"./reduxstore\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = 'SET-USERS';\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT';\r\nconst ON_NUMBER_CHANGE = 'ON-NUMBER-CHANGE';\r\nconst SEARCH_NUMBER = 'SEARCH-NUMBER';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE-IS-FETCHING';\r\nconst TOGGLE_IS_FETCHING_PROGRESS = 'TOGGLE-IS-FETCHING-PROGRESS';\r\n\r\n\r\nlet initialState = {\r\n    users: [\r\n        /*\r\n        {\r\n            id: 1,\r\n            ava: 'http://zhaba.ru/storage-10667/images-4356/7da28183c1ca335727f6033007c24c3f_74356.gif',\r\n            followed: true,\r\n            fullName: 'Andry',\r\n            status: 'Сижу кушаю',\r\n            location: {city: 'Dnipro', country: 'Ukraine'}\r\n        },\r\n        {\r\n            id: 2,\r\n            ava: 'http://zhaba.ru/storage-10667/images-4356/2ec52d3e31cc84526b5c1b8d332bb5f2_74356.gif',\r\n            followed: false,\r\n            fullName: 'Viktoriya',\r\n            status: 'на море',\r\n            location: {city: 'Poltava', country: 'Ukraine'}\r\n        },\r\n        {\r\n            id: 3,\r\n            ava: 'http://zhaba.ru/storage-10667/images-4356/54c86b4b33e968bb15eeea983d72a850_74356.gif',\r\n            followed: true,\r\n            fullName: 'Natalia',\r\n            status: 'в астрале',\r\n            location: {city: 'Dnipro', country: 'Ukraine'}\r\n        },\r\n        {\r\n            id: 4,\r\n            ava: 'http://zhaba.ru/storage-10667/images-4356/05f88dffdf9a406fe9b0bee9df3160a5_74356.gif',\r\n            followed: false,\r\n            fullName: 'Dmitry',\r\n            status: 'я Сенсей',\r\n            location: {city: 'Minsk', country: 'Belarus'}\r\n        },\r\n    */\r\n    ] as Array<UsersType>,\r\n    pageSize: 5 as number,\r\n    totalUsersCount: 0 as number,\r\n    currentPage: 1 as number,\r\n    numberChange: 0 as number,\r\n    isFetching: false as boolean,\r\n    followingInProgress: [] as Array<number>,///массив идшек юзеров\r\n};\r\nexport type initialStateType = typeof initialState;\r\nexport const usersReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectArray(state.users, action.userId, 'id', {followed: true})\r\n                /*users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })*/\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectArray(state.users, action.userId, 'id', {followed: false})\r\n                /*users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })*/\r\n            }\r\n        case SET_USERS: {\r\n            return {\r\n                ...state, users: [...action.users]\r\n            }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.totalCount}\r\n        }\r\n        case ON_NUMBER_CHANGE: {\r\n            return {...state, numberChange: action.number}\r\n        }\r\n        case SEARCH_NUMBER: {\r\n            if (state.numberChange >= 1 && state.numberChange <= state.totalUsersCount / state.pageSize) {\r\n                return {...state, currentPage: state.numberChange}\r\n            } else {\r\n                return {...state, currentPage: 1}\r\n            }\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            {\r\n                return {...state, isFetching: action.isFetching}\r\n            }\r\n        }\r\n        case TOGGLE_IS_FETCHING_PROGRESS: {\r\n            {\r\n                return {\r\n                    ...state,\r\n                    followingInProgress: action.isFetching\r\n                        ? [...state.followingInProgress, action.userId]\r\n                        : state.followingInProgress.filter(id => id != action.userId)\r\n                }\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n    //return state;\r\n}\r\n\r\ntype ActionsTypes = FollowType | UnFollowType | SetUsersType | SetCurrentPageType | SetTotalUsersCountType |\r\n    OnNumberChangeType | SearchNumberType | ToggleIsFetchingType | ToggleIsFetchingProgress\r\ntype FollowType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\nexport const follow = (userId: number): FollowType => {\r\n    return {\r\n        type: FOLLOW,\r\n        userId,\r\n    }\r\n}\r\ntype UnFollowType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\nexport const unFollow = (userId: number): UnFollowType => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        userId,\r\n    }\r\n}\r\ntype SetUsersType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UsersType>\r\n}\r\nexport const setUsers = (users: Array<UsersType>): SetUsersType => {\r\n    return {type: SET_USERS, users}\r\n};\r\ntype SetCurrentPageType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageType => {\r\n    return {type: SET_CURRENT_PAGE, currentPage}\r\n};\r\ntype SetTotalUsersCountType = {\r\n    type: typeof SET_TOTAL_USERS_COUNT\r\n    totalCount: number\r\n}\r\nexport const setTotalUsersCount = (totalCount: number): SetTotalUsersCountType => {\r\n    return {type: SET_TOTAL_USERS_COUNT, totalCount}\r\n};\r\ntype OnNumberChangeType = {\r\n    type: typeof ON_NUMBER_CHANGE\r\n    number: any\r\n}\r\nexport const onNumberChange = (number: any): OnNumberChangeType => {////////////////////////////////xzxzxzxzxzx\r\n    return {type: ON_NUMBER_CHANGE, number}\r\n};\r\ntype SearchNumberType = {\r\n    type: typeof SEARCH_NUMBER\r\n}\r\n\r\nexport const searchNumber = (): SearchNumberType => {\r\n    return {type: SEARCH_NUMBER}\r\n};\r\ntype ToggleIsFetchingType = {\r\n    type: typeof TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingType => {\r\n    return {type: TOGGLE_IS_FETCHING, isFetching}\r\n};\r\ntype ToggleIsFetchingProgress = {\r\n    type: typeof TOGGLE_IS_FETCHING_PROGRESS\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\nexport const toggleIsFetchingProgress = (isFetching: boolean, userId: number): ToggleIsFetchingProgress => {\r\n    return {type: TOGGLE_IS_FETCHING_PROGRESS, isFetching, userId}\r\n}\r\n\r\n\r\ntype getStateType = () => AppStateType;\r\ntype CurrentDispatchType = Dispatch<ActionsTypes>;\r\ntype ThunkActionType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>;\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number) => {\r\n    return async (dispatch: CurrentDispatchType, getState: getStateType) => {\r\n        dispatch(toggleIsFetching(true));\r\n        let data = await userAPI.getUsers(currentPage, pageSize);\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\n\r\nconst _followUnFollowFlow = async (\r\n    dispatch: CurrentDispatchType,\r\n    id: number,\r\n    apiMethod: any,\r\n    actionCreator: (userId: number)=>FollowType|UnFollowType) => {\r\n    dispatch(toggleIsFetchingProgress(true, id));\r\n    let data = await apiMethod(id);\r\n    if (data.resultCode == 0) {\r\n        dispatch(actionCreator(id))\r\n    }\r\n    dispatch(toggleIsFetchingProgress(false, id));\r\n}\r\n\r\nexport const deleteUser = (id: number): ThunkActionType => {\r\n    return async (dispatch) => {\r\n        let apiMethod = followAPI.deleteUser.bind(id)\r\n        let actionCreator = unFollow;\r\n        _followUnFollowFlow(dispatch, id, apiMethod, actionCreator);\r\n    }\r\n}\r\nexport const postUser = (id: number): ThunkActionType => {\r\n    return async (dispatch) => {\r\n        let apiMethod = followAPI.postUser.bind(id)\r\n        let actionCreator = follow;\r\n        _followUnFollowFlow(dispatch, id, apiMethod, actionCreator);\r\n    }\r\n    /*return async (dispatch) => {\r\n        dispatch(toggleIsFetchingProgress(true, id));\r\n        let data = await followAPI.postUser(id);\r\n        if (data.resultCode == 0) {\r\n            dispatch(follow(id))\r\n        }\r\n        dispatch(toggleIsFetchingProgress(false, id));\r\n    }*/\r\n}\r\n","import s from \"../Paginator/Paginator.module.css\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport DialogItem from \"../../Dialogs/DialogItem/DialogItem\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../FormControls/FormControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\n\r\ntype PropsType = {\r\n    currentPage: number;\r\n    onPageChanged: (arg0: number)=>void;\r\n    totalUsersCount: number;\r\n    pageSize: number;\r\n}\r\nconst Paginator: React.FC<PropsType> = (props) => {\r\n    let pagesCount: number = Math.ceil(props.totalUsersCount / props.pageSize);\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    let thispage = 1;\r\n    let StepsInTheBlock=10;\r\n    let [startOfBlock, setStartOfBlock] = useState<number>( 0)\r\n    let [endOfBlock, setEndOfBlock] = useState( 10)\r\n    let [someBlock, editSomeBlock] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\r\n    if (startOfBlock==0) setStartOfBlock(1)\r\n    let next = () => {\r\n        setEndOfBlock(endOfBlock += StepsInTheBlock);\r\n        setStartOfBlock(startOfBlock += StepsInTheBlock)\r\n        let newPages = pages.filter(item => item <= endOfBlock && item >= startOfBlock);\r\n        editSomeBlock(newPages);\r\n    }\r\n    let prev = () => {\r\n        setEndOfBlock(endOfBlock -= StepsInTheBlock);\r\n        setStartOfBlock(startOfBlock -= StepsInTheBlock)\r\n        let newPages = pages.filter(item => item <= endOfBlock && item >= startOfBlock);\r\n        editSomeBlock(newPages);\r\n    }\r\n    const onSubmit = (formData: any) => {\r\n        props.onPageChanged(formData.searchPage)\r\n    }\r\n    const maxLength4 = maxLengthCreator(4)\r\n    const searchPage = (props:any) => {\r\n        return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field component={Textarea} name={'searchPage'} validate={[requiredField, maxLength4]}\r\n                           placeholder={'Введите страницу'}/>\r\n                </div>\r\n                <div>\r\n                    <button>Поиск страницы</button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n    const SearchPageForm = reduxForm({\r\n        form: \"searchPage\"\r\n    })(searchPage);\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {startOfBlock != 1 && <span onClick={prev} className={s.notActive}>Previous</span>}\r\n                {someBlock.map((d:number) => <span onClick={() => {\r\n                    props.onPageChanged(d)\r\n                }} className={props.currentPage == d ? s.current : s.notActive}> {d} </span>)}\r\n                {endOfBlock != pages.length && <span onClick={next} className={s.notActive}>Next</span>}\r\n            </div>\r\n            <div>\r\n                Введите номер страницы\r\n                <SearchPageForm initialValues={{value: props.currentPage}} onSubmit={onSubmit}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Paginator;\r\n","import React from 'react';\r\nimport s from './Users.module.css';\r\nimport userPhoto from \"../../asets/images/instami-avatarka-v-instagram-9.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {followAPI} from \"../../api/api\";\r\nimport {deleteUser} from \"../../redux/usersReducer\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormControls/FormControls\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\n\r\nconst User = ({user, followingInProgress, deleteUser, postUser}) => {\r\n    return (<div className={s.margin}>\r\n            <div className={s.wrapper}>\r\n                <div className={s.photo}>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.large != null ? user.photos.large : userPhoto} className={s.userPhoto}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div className={s.name}>{user.name}</div>\r\n                <div className={s.city}>{user.id}</div>\r\n                <div className={s.status}>{user.status != null ? user.status : \"userStatus\"}</div>\r\n                <div className={s.button}>\r\n                    {user.followed\r\n                        ? <button disabled={followingInProgress.some(id => id == user.id)} onClick={() => {\r\n                            deleteUser(user.id)\r\n                        }}>Отписаться</button>\r\n                        : <button disabled={followingInProgress.some(id => id == user.id)} onClick={() => {\r\n                            postUser(user.id)\r\n                        }}>Подписаться</button>\r\n                    }\r\n                </div>\r\n                <div className={s.country}>{\"props.location.country\"}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport s from './Users.module.css';\r\nimport User from \"./User\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport {UsersType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    currentPage: number;\r\n    onPageChanged: (arg0: number)=>void;\r\n    totalUsersCount: number;\r\n    pageSize: number;\r\n    users: Array<UsersType>\r\n    followingInProgress: Array<number>;\r\n    deleteUser: ()=>void;\r\n    postUser: ()=>void;\r\n}\r\nconst Users: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                Поиск по сайту\r\n                <Paginator currentPage={props.currentPage}\r\n                           onPageChanged={props.onPageChanged}\r\n                           totalUsersCount={props.totalUsersCount}\r\n                           pageSize={props.pageSize}\r\n                />\r\n            </div>\r\n            {props.users.map((u: any) => <User key={u.id}\r\n                                          user={u}\r\n                                          followingInProgress={props.followingInProgress}\r\n                                          deleteUser={props.deleteUser}\r\n                                          postUser={props.postUser}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users;","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./reduxstore\";\r\n\r\nexport const getUsers=(state: AppStateType)=>{\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsersSelector=(state: AppStateType)=>{\r\n    return getUsers(state).filter(u=>true);\r\n}\r\n\r\nexport const getUsersSuperSelector = createSelector(getUsers, (users)=>{\r\n    return users.filter(u=>true);\r\n})\r\n\r\nexport const getPageSize=(state: AppStateType)=>{\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount=(state: AppStateType)=>{\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage=(state: AppStateType)=>{\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getNumberChange=(state: AppStateType)=>{\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getIsFetching=(state: AppStateType)=>{\r\n    return state.usersPage.isFetching;\r\n}\r\nexport const getFollowingInProgress=(state: AppStateType)=>{\r\n    return state.usersPage.followingInProgress;\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow,\r\n    setUsers,\r\n    unFollow,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    onNumberChange,\r\n    searchNumber,\r\n    toggleIsFetching, toggleIsFetchingProgress, requestUsers, deleteUser, postUser,\r\n} from \"../../redux/usersReducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getNumberChange,\r\n    getPageSize, getTotalUsersCount, getUsersSuperSelector,\r\n} from \"../../redux/usersSelectors\";\r\nimport {UsersType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../redux/reduxstore\";\r\n\r\ntype MapStatePropsType={\r\n    totalUsersCount: number;\r\n    pageSize: number;\r\n    users: Array<UsersType>;\r\n    currentPage: number;\r\n    isFetching: boolean;\r\n    followingInProgress: Array<number>;\r\n    numberChange: number;\r\n}\r\ntype MapDispatchPropsType={\r\n    setCurrentPage:(pageNumber: number)=>void;\r\n    searchNumber: ()=>void;\r\n    requestUsers: (currentPag: number, pageSize: number)=>void;\r\n    deleteUser: (arg0: number)=>void;\r\n    postUser: (arg0: number)=>void;\r\n    onNumberChange: (arg0: number)=>void\r\n    setTotalUsersCount: (arg0: number)=>void;\r\n    toggleIsFetching: (arg0: boolean)=>void;\r\n    toggleIsFetchingProgress: any;\r\n    setUsers: any;\r\n}\r\ntype OwnPropsType= {\r\n    pageTitle: string;\r\n    pageNumber: number;\r\n}\r\ntype PropsType=MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\nclass UsersAPIComponent extends React.Component<PropsType> {\r\n    /*constructor(props) {\r\n        super(props);\r\n        }\r\n    }*/\r\n    componentDidMount() {\r\n        let {currentPage, pageSize, requestUsers} = this.props\r\n        requestUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        let {setCurrentPage, requestUsers, pageSize} = this.props\r\n        setCurrentPage(pageNumber);\r\n        requestUsers(pageNumber, pageSize);\r\n    }\r\n    onNumberChange = (e: any) => {\r\n        let number = e.target.value;\r\n        onNumberChange(number);\r\n    };\r\n    searchNumber = () => {\r\n        let {searchNumber, requestUsers, currentPage, pageSize} = this.props\r\n        searchNumber();\r\n        requestUsers(currentPage, pageSize);\r\n    };\r\n\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <h3>{this.props.pageTitle}</h3>\r\n            <Users\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                //searchNumber={this.searchNumber}\r\n               // onNumberChange={this.onNumberChange}\r\n                //numberChange={this.props.numberChange}\r\n                users={this.props.users}\r\n              // unFollow={this.props.unFollow}\r\n               //follow={this.props.follow}\r\n                followingInProgress={this.props.followingInProgress}\r\n                //toggleIsFetchingProgress={this.props.toggleIsFetchingProgress}\r\n                deleteUser={()=>this.props.deleteUser}\r\n                postUser={()=>this.props.postUser}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n/*let mapStateToProps = (state) => {\r\n    return {\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        pageSize: state.usersPage.pageSize,\r\n        users: state.usersPage.users,\r\n        currentPage: state.usersPage.currentPage,\r\n        numberChange: state.usersPage.numberChange,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n    }\r\n}*/\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        pageSize: getPageSize(state),\r\n        //users: getUsers(state),\r\n        users: getUsersSuperSelector(state),\r\n        currentPage: getCurrentPage(state),\r\n        numberChange: getNumberChange(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    }\r\n}\r\n/*let AuthRedirectComponent=withAuthRedirect(UsersAPIComponent)\r\nconst UsersContainer = connect(mapStateToProps, {\r\n    follow, unFollow, setUsers, setCurrentPage, setTotalUsersCount,\r\n    onNumberChange, searchNumber, toggleIsFetching, toggleIsFetchingProgress,\r\n    getUsers, deleteUser, postUser\r\n})(AuthRedirectComponent);*/\r\n\r\n//export default UsersContainer;\r\n\r\n\r\n\r\nexport default compose(\r\n    //TStateProps={}, TDispatchProps={}, TOwnProps={}, State= DefaultRootState\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {\r\n        /*follow, unFollow,*/ setUsers, setCurrentPage, setTotalUsersCount, searchNumber, toggleIsFetching, toggleIsFetchingProgress,\r\n        requestUsers, deleteUser, postUser, onNumberChange\r\n    }),\r\n   // withAuthRedirect,\r\n\r\n)(UsersAPIComponent)","import React from 'react';\r\nimport s from './Music.module.css';\r\n\r\nconst Music = (props) => {\r\n    return (\r\n        <div>\r\n        Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userPhoto from \"../../asets/images/instami-avatarka-v-instagram-9.png\";\r\n\r\nconst Header = (props) => {\r\n    return <header className={s.header}>\r\n        <img src='https://www.freelogodesign.org/Content/img/logo-ex-7.png'/>\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth ? <div className={s.wrapper}>\r\n                    <div className={s.item}><img src={props.smallPhoto == null ? userPhoto : props.smallPhoto}/></div>\r\n                    <div className={s.item}> {props.login}</div>\r\n                    <button className={s.item} onClick={props.LogoutAC}>Log out</button>\r\n                </div>\r\n                : <NavLink to=\"/login\" activeClassName={s.activeLink}>Login</NavLink>}\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport * as axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {LogoutAC} from \"../../redux/authReducer\";\r\n\r\n\r\nclass HeaderContainer extends React.Component {\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStatetoProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n    id: state.auth.userId,\r\n});\r\nexport default connect(mapStatetoProps, {LogoutAC})(HeaderContainer);","import React from 'react';\r\nimport s from '../common/FormControls/FormControls.module.css';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, CreateField} from \"../common/FormControls/FormControls\";\r\nimport {requiredField} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profileReducer\";\r\nimport {LoginAC, LogoutAC} from \"../../redux/authReducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/reduxstore\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, OwnPropsType> & OwnPropsType> = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {CreateField(\"Email\", 'email', [requiredField], Input)}\r\n            {CreateField(\"Password\", 'password', [requiredField], Input, \"password\")}\r\n            {CreateField(null, 'rememberMe', null, Input, \"checkbox\", \"RememberMe\")}\r\n            {captchaUrl &&\r\n            <div><img src={captchaUrl}/>{CreateField(\"captcha\", 'captcha', [requiredField], Input)}</div>}\r\n            {error && <div className={s.formSummmayError}>\r\n                {error}\r\n            </div>}\r\n\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\nconst LoginReduxForm = reduxForm<FormDataType, OwnPropsType>({\r\n    form: \"login\"\r\n})(LoginForm)\r\n\r\n\r\ntype MapStatePropsType = {\r\n    captchaUrl: string | null,\r\n    isAuth: boolean,\r\n}\r\ntype MapDispatchPropsType = {\r\n    LogoutAC: () => void,\r\n    LoginAC: (email: string,\r\n              password: string,\r\n              rememberMe: boolean,\r\n              captcha: string) => void,\r\n}\r\ntype OwnPropsType = {\r\n    captchaUrl: string |null;\r\n}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType;\r\ntype FormDataType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n    captcha: string;\r\n}\r\nconst Login = (props: PropsType) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.LoginAC(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n        console.log(formData)\r\n    }\r\n    if (props.isAuth) {\r\n\r\n        return <Redirect to='/profile'/>\r\n    } else return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet LoginRedirectComponent = withAuthRedirect(Login)\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth,\r\n})\r\nexport default compose(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {\r\n        LogoutAC, LoginAC\r\n    })\r\n)(Login);","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport {profileReducer} from \"./profileReducer\";\r\nimport {sidebarReducer} from \"./sidebarReducer\";\r\nimport {usersReducer} from \"./usersReducer\";\r\nimport {authReducer} from \"./authReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport {appReducer} from \"./appReducer\";\r\nimport {dialogsReducer} from \"./dialogsReducer\";\r\n\r\nlet rootReducer=combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n});\r\n\r\ntype RootReducerType= typeof rootReducer;\r\nexport type AppStateType=ReturnType<RootReducerType>\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// @ts-ignore\r\nwindow.__store__=store;\r\n\r\nexport default store;\r\n","import React, {Suspense} from 'react';\r\nimport Preloader from \"../components/common/Preloader/Preloader\";\r\n\r\nexport const withSuspense=(Component)=>{\r\n    return (props)=>{return (\r\n        <Suspense fallback={<Preloader/>}>\r\n            <Component {...props} />\r\n        </Suspense>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport s from './Error404.module.css';\r\nimport error from \"../../../asets/svg/868843.svg\";\r\n\r\nconst Error404 = (props) => {\r\n    return (\r\n        <div>\r\n            <img className={s.error} src={error}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error404;","import React, {Suspense} from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport {HashRouter, BrowserRouter, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport News from \"./components/News/News\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport Music from \"./components/Music/Music\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp, letError} from \"./redux/appReducer\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nimport store from \"./redux/reduxstore\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\nimport Error404 from \"./components/common/Error/Error404\";\r\nimport process from \"process\";\r\n\r\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"));\r\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"));\r\n\r\nclass App extends React.Component {\r\n    catchAllUnhandledErrors=(reason)=>{\r\n        //letError(reason.reason)\r\n    }\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (<div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className=\"app-wrapper-content\">\r\n                    <Switch>\r\n                        <Route exact path=\"/\" render={withSuspense(ProfileContainer)}/>\r\n                        <Route path=\"/dialogs\" render={withSuspense(DialogsContainer)}/>\r\n                        <Route path=\"/profile/:userId?\" render={withSuspense(ProfileContainer)}/>\r\n                        <Route path=\"/users\" render={() => <UsersContainer pageTitle =\"Самураи\"/>}/>\r\n                        <Route path=\"/login\" render={() => <Login/>}/>\r\n                        <Route path=\"/music\" render={() => <Music/>}/>\r\n                        <Route path=\"/news\" render={() => <News/>}/>\r\n                        <Route path=\"/settings\" render={() => <Settings/>}/>\r\n                        <Route path=\"*\" render={() => <Error404/>}/>\r\n                    </Switch>\r\n\r\n                </div>\r\n                <div className='error'>{this.props.globalError}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    initialized: state.app.initialized,\r\n    globalError: state.app.globalError,\r\n})\r\nlet AppContainer = compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp, letError},\r\n    ))(App);\r\n\r\nconst SamuraiJSApp = (props) => {\r\n    return (\r\n        <HashRouter basename={process.env.PUBLIC_URL}>\r\n            <Provider store={store}>\r\n                <AppContainer/>\r\n            </Provider>\r\n        </HashRouter>\r\n\r\n    )\r\n}\r\nexport default SamuraiJSApp;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport SamuraiJSApp from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<SamuraiJSApp/>, document.getElementById('root'));\r\n\r\n//serviceWorker.unregister();\r\n//rerenderEntiretree();\r\n/*store.subscribe(rerenderEntiretree);*/\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2yvhM\",\"dialog\":\"Dialogs_dialog__k930i\",\"dialogsItems\":\"Dialogs_dialogsItems__1eIO1\",\"active\":\"Dialogs_active__2jYKT\",\"messages\":\"Dialogs_messages__3cD4p\",\"message\":\"Dialogs_message__3I8nx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2v6Qh\",\"loginBlock\":\"Header_loginBlock__3uozL\",\"wrapper\":\"Header_wrapper__1sROT\",\"item\":\"Header_item__2DBve\"};","import {setAuthUserData, SetAuthUserDataType, setUserSmallPhoto, SetUserSmallPhotoType} from \"./authReducer\";\r\nimport {authAPI, profileAPI} from \"../api/api\";\r\n//import {constants} from \"os\";\r\n//import {constants} from \"os\";\r\n//import {AppStateType} from \"./reduxstore\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED-SUCCESS\";\r\nconst ER = 'ERROR';\r\n\r\nexport type InitialStateType = {\r\n    initialized: boolean;\r\n    globalError: string;\r\n}\r\nlet initialState: InitialStateType = {\r\n    initialized: false,\r\n    globalError: \"\",\r\n};\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case ER:\r\n            return {\r\n                ...state,\r\n                globalError: action.error,\r\n            }\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsTypes =InitializedSuccessActionType | letErrorActionType| SetAuthUserDataType | SetUserSmallPhotoType;\r\n\r\ntype InitializedSuccessActionType = { type: typeof INITIALIZED_SUCCESS }\r\n\r\nexport const initializedSuccess = (): InitializedSuccessActionType => {\r\n    return {type: INITIALIZED_SUCCESS}\r\n};\r\nexport type letErrorActionType = { type: typeof ER; error: string }\r\nexport const letError = (error: string):letErrorActionType => {\r\n    return {\r\n        type: ER,\r\n        error: error\r\n    }\r\n};\r\n\r\n//type getStateType = () => AppStateType;\r\ntype CurrentDispatchType = Dispatch<ActionsTypes>;\r\n\r\nexport const thunkLetError = (error: string) => (dispatch: CurrentDispatchType) => {\r\n    dispatch(letError(error))\r\n    setTimeout(() => {\r\n        dispatch(letError(''))\r\n    }, 5000)\r\n}\r\n\r\ntype FirstDataType = {\r\n    resultCode: number;\r\n    data: {\r\n        id: number;\r\n        login: string;\r\n        email: string;\r\n    };\r\n}\r\ntype SecondDataType = {\r\n    photos: {\r\n        small: string;\r\n    }\r\n}\r\nexport const initializeApp = () => (dispatch: CurrentDispatchType) => {\r\n    let id: number;\r\n    let login;\r\n    let email;\r\n    authAPI.authMe().then((data: FirstDataType) => {\r\n        if (data.resultCode == 0) {\r\n            id = data.data.id;\r\n            login = data.data.login;\r\n            email = data.data.email;\r\n            dispatch(setAuthUserData(id, email, login, true));\r\n        }\r\n    }).then(() => {\r\n        profileAPI.getUser(id).then((data: SecondDataType) => {\r\n            dispatch(setUserSmallPhoto(data.photos.small));\r\n        })\r\n    }).then(() => {\r\n        dispatch(initializedSuccess());\r\n    });\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControlError\":\"FormControls_formControlError__uemkh\",\"error\":\"FormControls_error__1WXK3\",\"formSummmayError\":\"FormControls_formSummmayError__3r7xW\"};","import React from 'react';\r\nimport s from './Preloader.module.css';\r\nimport preloader from \"../../../asets/svg/Double Ring-2.2s-200px.svg\";\r\n\r\nconst Preloader = (props) => {\r\n    return (\r\n        <div>\r\n            <img src={preloader}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"current\":\"Paginator_current__2t5fU\",\"notActive\":\"Paginator_notActive__1bMe3\"};","module.exports = __webpack_public_path__ + \"static/media/instami-avatarka-v-instagram-9.47699637.png\";","import React from 'react';\r\nimport s from './Avatar.module.css';\r\n\r\nconst Avatar = (props) => {\r\n    return (\r\n        <div>\r\n            <span className={s.avatar}>\r\n                <img src={props.state.ava}/>\r\n            </span>\r\n            <span>{props.state.name}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Avatar;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Avatar from \"./Avatar/Avatar\";\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={\"/dialogs/\" + props.id}><Avatar state={props}/></NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;"],"sourceRoot":""}