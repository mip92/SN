{"version":3,"sources":["hoc/withAuthRedirect.js","api/api.ts","redux/dialogsReducer.ts","components/Navbar/Sidebar/Sidebar.module.css","components/Navbar/Sidebar/Sidebarfriends/Sidebarfriends.module.css","components/Dialogs/DialogItem/Avatar/Avatar.module.css","asets/svg/Double Ring-2.2s-200px.svg","components/common/Error/Error404.module.css","asets/svg/868843.svg","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Navbar/Navbar.module.css","components/common/FormControls/FormControls.jsx","utils/validators/validators.js","redux/authReducer.ts","components/Users/Users.module.css","redux/sidebarReducer.ts","components/Navbar/Sidebar/Sidebarfriends/Sidebarfriends.jsx","components/Navbar/Sidebar/Sidebar.jsx","components/Navbar/Sidebar/SidebarContainer.jsx","components/Navbar/Navbar.jsx","components/Settings/Settings.jsx","components/News/News.jsx","utils/objectsHelpers.js","redux/usersReducer.ts","components/common/Paginator/Paginator.tsx","components/Users/User.jsx","components/Users/Users.tsx","redux/usersSelectors.ts","components/Users/UsersContainer.tsx","components/Music/Music.jsx","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","components/Login/Login.jsx","redux/reduxstore.ts","hoc/withSuspense.js","components/common/Error/Error404.jsx","App.js","serviceWorker.js","index.js","components/Dialogs/Dialogs.module.css","components/Header/Header.module.css","redux/appReducer.ts","components/common/FormControls/FormControls.module.css","components/common/Preloader/Preloader.jsx","components/common/Paginator/Paginator.module.css","asets/images/instami-avatarka-v-instagram-9.png","redux/profileReducer.ts","components/Dialogs/DialogItem/Avatar/Avatar.jsx","components/Dialogs/DialogItem/DialogItem.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","ResultCodesEnum","instance","axios","create","withCredentials","baseURL","headers","userAPI","getUsers","currentPage","pageSize","get","then","response","data","followAPI","deleteUser","id","delete","postUser","post","authAPI","authMe","login","email","password","rememberMe","captcha","logout","profileAPI","getUser","userId","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","securityAPI","getCaptchaURL","initialState","messages","message","newMessageText","dialogs","name","ava","dialogsReducer","action","type","text","addMessageActionCreator","module","exports","Message","className","s","maxLength20","maxLengthCreator","MessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","Dialogs","dialogElements","map","d","DialogItem","key","messageElements","m","dialogsItems","addDialog","messageText","input","meta","touched","error","hasError","formControlError","Input","CreateField","placeholder","CreateFieldForProfile","value","maxLength","length","smallPhoto","captchaUrl","authReducer","setAuthUserData","setUserSmallPhoto","LoginAC","dispatch","a","resultCode","Success","photos","small","CaptchaIsRequired","getCaptchaUrl","stopSubmit","_error","url","LogoutAC","friends","getRandomArbitrary","min","max","rand","Math","random","round","i","splice","Sidebarfriends","avatar","src","Sidebar","window","onload","addFriends","threefriends","wrapper","SidebarContainer","sidebar","Navbar","nav","item","activeClassName","activeLink","active","Settings","News","updateObjectArray","items","itemId","objPropName","newObjProps","u","users","totalUsersCount","numberChange","isFetching","followingInProgress","follow","unFollow","setUsers","setTotalUsersCount","totalCount","onNumberChange","number","toggleIsFetching","toggleIsFetchingProgress","_followUnFollowFlow","apiMethod","actionCreator","Paginator","pagesCount","ceil","pages","push","useState","startOfBlock","setStartOfBlock","endOfBlock","setEndOfBlock","someBlock","editSomeBlock","maxLength4","SearchPageForm","onClick","newPages","filter","notActive","onPageChanged","current","initialValues","searchPage","User","user","margin","photo","large","userPhoto","city","button","followed","disabled","some","country","Users","usersPage","getUsersSuperSelector","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getNumberChange","getIsFetching","getFollowingInProgress","UsersAPIComponent","pageNumber","setCurrentPage","requestUsers","e","target","searchNumber","Preloader","pageTitle","compose","getState","bind","Music","Header","header","loginBlock","HeaderContainer","LoginReduxForm","formSummmayError","Login","console","log","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","formReducer","app","appReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","fallback","Error404","DialogsContainer","lazy","ProfileContainer","App","catchAllUnhandledErrors","reason","initializeApp","addEventListener","removeEventListener","initialized","exact","path","render","UsersContainer","globalError","AppContainer","withRouter","letError","SamuraiJSApp","basename","process","env","PUBLIC_URL","Boolean","location","hostname","match","ReactDOM","document","getElementById","ER","thunkLetError","setTimeout","preloader","posts","likesCount","profile","newPostText","newPost","stateCopy","p","postId","aboutMe","contacts","lookingForAJob","lookingForAJobDescription","addPostActionCreator","setStatus","updateProfile","getUserProfile","file","r","sendForm","fullName","github","vk","facebook","instagram","twitter","website","youtube","mainLink","undefined","Promise","reject","Avatar","dialog"],"mappings":"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","file":"static/js/main.11958490.chunk.js","sourcesContent":["import {Redirect} from \"react-router-dom\";\r\nimport React from 'react';\r\nimport Dialogs from \"../components/Dialogs/Dialogs\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect=(state)=>({\r\n    isAuth:state.auth.isAuth,\r\n});\r\nexport const withAuthRedirect=(Component)=>{\r\n    class RedirectComponent extends React.Component{\r\n        render(){\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent=connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","import axios, {AxiosResponse} from \"axios\";\r\nimport {FormDataType, GetUserType} from \"../types/types\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"aec09892-749d-4c42-b208-544b7f308b49\"\r\n    },\r\n});\r\n\r\nexport const userAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    }\r\n}\r\nexport const followAPI = {\r\n    deleteUser(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n    postUser(id: number) {\r\n        return instance.post(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRequired = 10,\r\n}\r\n\r\ntype AuthMeType = {\r\n    resultCode: number,\r\n    messages: Array<string>,\r\n    data: {\r\n        id: number,\r\n        email: string,\r\n        login: string\r\n    }\r\n}\r\ntype LoginType = {\r\n    resultCode: number,\r\n    messages: Array<string>,\r\n    data: {\r\n        userId: number,\r\n    }\r\n}\r\ntype logoutType = {\r\n    resultCode: number,\r\n    messages: Array<string>,\r\n    data: {}\r\n}\r\n\r\nexport const authAPI = {\r\n    authMe() {\r\n        return instance.get<AuthMeType>(`auth/me`)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n    login(email: string,\r\n          password: string,\r\n          rememberMe = false,\r\n          captcha: string | null = null) {\r\n        return instance.post<LoginType>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n    logout() {\r\n        return instance.delete<logoutType>(`auth/login`)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    }\r\n}\r\ntype updateStatus = {\r\n    resultCode: number,\r\n    messages: Array<string>,\r\n    data: { status: string }\r\n}\r\ntype savePhotoType = {\r\n    resultCode: number,\r\n    messages: Array<string>,\r\n    data: {\r\n        photos: {\r\n            small: string | null,\r\n            large: string | null,\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const profileAPI = {\r\n    getUser(userId: number) {\r\n        return instance.get<GetUserType>(`profile/` + userId)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<updateStatus>(`profile/status/`, {status: status})\r\n            .then(response => {\r\n                    return response.data\r\n                }\r\n            );\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put<savePhotoType>(`/profile/photo`, formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        }).then(response => {\r\n                return response.data\r\n            }\r\n        );\r\n    },\r\n\r\n    formData(formData: FormDataType) {\r\n        return instance.put(`/profile`, formData)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n}\r\nexport const securityAPI = {\r\n    getCaptchaURL() {\r\n        return instance.get(`security/get-captcha-url`)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n}","import {SetAuthUserDataType, SetUserSmallPhotoType} from \"./authReducer\";\r\n\r\nconst ADD_MESSAGE = \"ADD-MESSAGE\";\r\ntype addMessageActionCreatorType={\r\n    type: typeof ADD_MESSAGE;\r\n    text: string;\r\n}\r\ntype MessageType={\r\n    id: number,\r\n    message: string | null,\r\n}\r\ntype DialogType={\r\n    id: number | null,\r\n    name: string | null,\r\n    ava: string | null,\r\n}\r\nlet initialState = {\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your it-kamasutra?'},\r\n        {id: 3, message: 'Yo'},\r\n    ] as Array<MessageType>,\r\n    newMessageText: \"\" as string,\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: 'Dimych',\r\n            ava: \"https://s00.yaplakal.com/pics/pics_original/9/9/2/15045299.jpg\"\r\n        },\r\n        {id: 2, name: 'Andrey', ava: \"https://klike.net/uploads/posts/2018-06/1528720172_1.jpg\"},\r\n        {id: 3, name: 'Sveta', ava: \"https://klike.net/uploads/posts/2018-06/1528720227_2.png\"},\r\n        {id: 4, name: 'Sasha', ava: \"https://klike.net/uploads/posts/2018-06/1528720246_5.jpg\"},\r\n        {id: 5, name: 'Viktor', ava: \"https://klike.net/uploads/posts/2018-06/1528720305_6.jpg\"},\r\n        {id: 6, name: 'Valera', ava: \"https://klike.net/uploads/posts/2018-06/1528720257_8.jpg\"},\r\n        {\r\n            id: 7,\r\n            name: 'Sergey',\r\n            ava: \"https://klike.net/uploads/posts/2020-06/1591514917_7.jpg\"\r\n        },\r\n        {\r\n            id: 8,\r\n            name: 'Dimon',\r\n            ava: \"https://vjoy.cc/wp-content/uploads/2019/12/screenshot_3-min-13-640x570-1.png\"\r\n        },\r\n    ]as Array<DialogType>,\r\n};\r\nexport type initialStateType = typeof initialState;\r\n\r\nexport const dialogsReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n    //let stateCopy= JSON.parse(JSON.stringify(state))\r\n    switch (action.type) {\r\n        case ADD_MESSAGE: {\r\n            return {\r\n                ...state,\r\n                newMessageText: '',\r\n                messages: [...state.messages, {id: 4, message: action.text}]\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\ntype ActionsTypes =addMessageActionCreatorType;\r\n\r\nexport const addMessageActionCreator = (text: string):addMessageActionCreatorType => {\r\n    return {\r\n        type: ADD_MESSAGE,\r\n        text,\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Sidebar_wrapper__SDCfj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Sidebarfriends_avatar__1GGru\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Avatar_avatar__4PJvH\"};","module.exports = __webpack_public_path__ + \"static/media/Double Ring-2.2s-200px.1a5e1cfb.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Error404_error__3K_OV\"};","module.exports = __webpack_public_path__ + \"static/media/868843.6d8e81ad.svg\";","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\nimport {Textarea} from \"../common/FormControls/FormControls\";\r\nconst maxLength20 = maxLengthCreator(20)\r\nconst MessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'messageText'} validate={[requiredField, maxLength20]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst MessageReduxForm = reduxForm({\r\n    form: \"message\"\r\n})(MessageForm)\r\nconst Dialogs = (props) => {\r\n    const onSubmit=(formData)=>{\r\n        props.addDialog(formData.messageText);\r\n    }\r\n    let dialogElements = props.state.dialogs.map((d) => <DialogItem name={d.name} id={d.id} key={d.id} ava={d.ava}/>)\r\n    let messageElements = props.state.messages.map((m) => <Message message={m.message} key={m.id}/>)\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messageElements}\r\n                < MessageReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3LCZV\",\"item\":\"Navbar_item__r53jG\",\"activeLink\":\"Navbar_activeLink__xML_-\",\"error\":\"Navbar_error__1vUJu\"};","import React from \"react\";\r\nimport s from './FormControls.module.css';\r\nimport {requiredField} from \"../../../utils/validators/validators\";\r\nimport {Field} from \"redux-form\";\r\n\r\nconst Textarea = ({input, meta:{touched, error}, ...props}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea {...input} {...props} className={hasError ? s.formControlError : \"\"}/>\r\n            </div>\r\n            {hasError && <span className={s.error}>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\nconst Input = ({input, meta:{touched, error}, ...props}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div>\r\n            <div>\r\n                <input {...input} {...props} className={hasError ? s.formControlError : \"\"}/>\r\n            </div>\r\n            {hasError && <span className={s.error}>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst CreateField = (placeholder, name, validate, component, type, text=\"\") => {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder}\r\n                   component={component}\r\n                   name={name}\r\n                   validate={validate}\r\n                   type={type}\r\n            />{text}\r\n        </div>\r\n    )\r\n}\r\nconst CreateFieldForProfile = (placeholder, name, validate, component, type, text=\"\", value) => {\r\n    return (\r\n        <span>\r\n            <Field placeholder={placeholder}\r\n                   component={component}\r\n                   name={name}\r\n                   validate={validate}\r\n                   type={type}\r\n                   value={value}\r\n            />{text}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport {Textarea, Input, CreateField, CreateFieldForProfile}\r\n\r\n","\r\nexport const requiredField = (value)=> {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator=(maxLength)=>(value)=>{\r\n    if (value && value.length>maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","import {authAPI, profileAPI, ResultCodesEnum, securityAPI} from \"../api/api\";\r\n\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./reduxstore\";\r\n\r\nconst SET_USER_DATA = \"auth/SET-USER-DATA\";\r\nconst SET_USER_SMALL_PHOTO = \"auth/SET-USER-SMALL-PHOTO\";\r\nconst GET_CAPTCHA_URL_SUCCESS = \"GET-CAPTCHA-URL-SUCCESS\";\r\n\r\ntype InitialStateType = {\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean,\r\n    smallPhoto: string | null,\r\n    captchaUrl: string | null,\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    smallPhoto: null,\r\n    captchaUrl: null,\r\n};\r\n\r\nexport const authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            }\r\n        case SET_USER_SMALL_PHOTO:\r\n            return {\r\n                ...state,\r\n                smallPhoto: action.smallPhoto,\r\n            }\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                captchaUrl: action.captchaUrl,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsTypes =SetAuthUserDataType| GetCaptchaUrlSuccessType| SetUserSmallPhotoType;\r\n\r\nexport type SetAuthUserDataType = {\r\n    type: typeof SET_USER_DATA;\r\n    data: {\r\n        userId: number| null;\r\n        email: string| null;\r\n        login: string| null;\r\n        isAuth: boolean;\r\n    }\r\n}\r\nexport const setAuthUserData = (userId: number| null, email: string| null, login: string| null, isAuth: boolean): SetAuthUserDataType => {\r\n    return {type: SET_USER_DATA, data: {userId, email, login, isAuth}}\r\n};\r\ntype GetCaptchaUrlSuccessType = {\r\n    type: typeof GET_CAPTCHA_URL_SUCCESS;\r\n    captchaUrl: string;\r\n}\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessType => {\r\n    return {type: GET_CAPTCHA_URL_SUCCESS, captchaUrl}\r\n};\r\nexport type SetUserSmallPhotoType = {\r\n    type: typeof SET_USER_SMALL_PHOTO;\r\n    smallPhoto: string;\r\n}\r\nexport const setUserSmallPhoto = (smallPhoto: string ): SetUserSmallPhotoType => {\r\n    return {type: SET_USER_SMALL_PHOTO, smallPhoto}\r\n};\r\n\r\ntype firstDataType = {\r\n    resultCode: number;\r\n    data: {\r\n        id: number;\r\n        login: string;\r\n        email: string;\r\n    }\r\n}\r\ntype secondDataType = {\r\n    photos: {\r\n        small:string;\r\n    };\r\n}\r\ntype thirdDataType = {\r\n     resultCode: number;\r\n}\r\n\r\n\r\ntype CurrentDispatchType = Dispatch<ActionsTypes>;\r\ntype ThunkActionType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>;\r\nexport const authMe = () => (dispatch: CurrentDispatchType) => {\r\n    let id: number;\r\n    let login: string;\r\n    let email: string;\r\n    authAPI.authMe().then((data: firstDataType) => {\r\n        if (data.resultCode == ResultCodesEnum.Success) {\r\n            id = data.data.id;\r\n            login = data.data.login;\r\n            email = data.data.email;\r\n            dispatch(setAuthUserData(id, email, login, true));\r\n        }\r\n    }).then(() => {\r\n        profileAPI.getUser(id).then((data: secondDataType) => {\r\n            dispatch(setUserSmallPhoto(data.photos.small));\r\n        })\r\n    })\r\n};\r\nexport const LoginAC = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkActionType  => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (data.resultCode == 0) dispatch(authMe());\r\n\r\n    else {\r\n        if (data.resultCode == ResultCodesEnum.CaptchaIsRequired) {\r\n            await dispatch(getCaptchaUrl())\r\n        }\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"some error\";\r\n        await dispatch(<SetAuthUserDataType | GetCaptchaUrlSuccessType | SetUserSmallPhotoType>stopSubmit('login', {_error: message}));\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = () => async (dispatch: CurrentDispatchType) => {\r\n    let response = await securityAPI.getCaptchaURL();\r\n    let captcha = response.url;\r\n    dispatch(getCaptchaUrlSuccess(captcha));\r\n};\r\n\r\nexport const LogoutAC = () => async (dispatch:CurrentDispatchType) => {\r\n    await authAPI.logout().then((data: thirdDataType) => {\r\n        if (data.resultCode == 0) dispatch(setAuthUserData(null, null, null, false));\r\n    });\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__-wuiL\",\"name\":\"Users_name__2bmY7\",\"button\":\"Users_button__2N4oX\",\"status\":\"Users_status__RtvUu\",\"photo\":\"Users_photo__1F6QW\",\"city\":\"Users_city__HEX6h\",\"country\":\"Users_country__BhW2t\",\"wrapper\":\"Users_wrapper__2vPFF\",\"selectedPage\":\"Users_selectedPage__eiYT-\"};","import {letErrorActionType} from \"./appReducer\";\r\n\r\nconst ADD_THREE_FRIENDS = \"ADD-THREE-FRIENDS\";\r\ntype FriendsType={\r\n    id: number | null,\r\n    name: string | null,\r\n    ava: string | null,\r\n}\r\nlet initialState= {\r\n    friends: [\r\n        {\r\n            id: 1,\r\n            name: 'Dimych',\r\n            ava: \"https://s00.yaplakal.com/pics/pics_original/9/9/2/15045299.jpg\"\r\n        },\r\n        {id: 2, name: 'Andrey', ava: \"https://klike.net/uploads/posts/2018-06/1528720172_1.jpg\"},\r\n        {id: 3, name: 'Sveta', ava: \"https://klike.net/uploads/posts/2018-06/1528720227_2.png\"},\r\n        {id: 4, name: 'Sasha', ava: \"https://klike.net/uploads/posts/2018-06/1528720246_5.jpg\"},\r\n        {id: 5, name: 'Viktor', ava: \"https://klike.net/uploads/posts/2018-06/1528720305_6.jpg\"},\r\n        {id: 6, name: 'Valera', ava: \"https://klike.net/uploads/posts/2018-06/1528720257_8.jpg\"},\r\n        {\r\n            id: 7,\r\n            name: 'Sergey',\r\n            ava: \"https://klike.net/uploads/posts/2020-06/1591514917_7.jpg\"\r\n        },\r\n        {\r\n            id: 8,\r\n            name: 'Dimon',\r\n            ava: \"https://vjoy.cc/wp-content/uploads/2019/12/screenshot_3-min-13-640x570-1.png\"\r\n        },\r\n    ]as Array<FriendsType>,\r\n};\r\nexport type initialStateType = typeof initialState;\r\n\r\nfunction getRandomArbitrary(min: number, max: number) {\r\n    let rand = min - 0.5 + Math.random() * (max - min + 1);\r\n    return Math.round(rand);\r\n}\r\n\r\nfor (let i = initialState.friends.length; i > 3; i--) {\r\n    initialState.friends.splice(getRandomArbitrary(0, initialState.friends.length - 1), 1);\r\n}\r\n\r\nexport const sidebarReducer = (state=initialState, action: ActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case ADD_THREE_FRIENDS: {\r\n            return state;\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\ntype ActionsTypes =AddThreeFriendsActionCreatorType;\r\n\r\ntype AddThreeFriendsActionCreatorType = {\r\n    type: typeof ADD_THREE_FRIENDS;\r\n}\r\nexport const addThreeFriendsActionCreator = ():AddThreeFriendsActionCreatorType => {\r\n    return {\r\n        type: ADD_THREE_FRIENDS,\r\n    }\r\n}\r\n","import React from 'react';\r\nimport s from './Sidebarfriends.module.css';\r\n\r\nconst Sidebarfriends = (props) => {\r\n    return (\r\n        <div className={s.avatar}>\r\n            <img src={props.ava}/>\r\n            <div>{props.name}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebarfriends;","import React from 'react';\r\nimport s from './Sidebar.module.css';\r\nimport Sidebarfriends from \"./Sidebarfriends/Sidebarfriends\";\r\nimport DialogItem from \"../../Dialogs/DialogItem/DialogItem\";\r\n\r\nconst Sidebar = (props) => {\r\n\r\n    window.onload=()=>{props.addFriends()}\r\n    let threefriends = props.threefriends.map((d) => <Sidebarfriends name={d.name} key={d.id}  ava={d.ava}/>)\r\n\r\n    return (\r\n        <div>\r\n           FRIENDS\r\n\r\n            <div className={s.wrapper}>\r\n                {threefriends}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\r\nimport {addThreeFriendsActionCreator} from \"../../../redux/sidebarReducer\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps=(state)=>{\r\n    return{\r\n        threefriends: state.sidebar.friends,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps=(dispatch)=>{\r\n    return{\r\n        addFriends:()=>{dispatch(addThreeFriendsActionCreator())},\r\n    }\r\n}\r\nconst SidebarContainer=connect(mapStateToProps, mapDispatchToProps)(Sidebar);\r\n\r\nexport default SidebarContainer;","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport SidebarContainer from \"./Sidebar/SidebarContainer\";\r\n\r\n\r\n\r\nconst Navbar = (props) => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={`${s.active} ${s.item}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <SidebarContainer />\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport s from './Settings.module.css';\r\n\r\nconst Settings = (props) => {\r\n    return (\r\n        <div>\r\n        Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport s from './News.module.css';\r\n\r\nconst News = (props) => {\r\n    return (\r\n        <div>\r\n        News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","export const updateObjectArray=(items, itemId, objPropName, newObjProps)=> {\r\n    return items.map(u => {\r\n        if (u.objPropName === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {followAPI, userAPI} from \"../api/api\";\r\nimport {updateObjectArray} from \"../utils/objectsHelpers\";\r\nimport {PhotosType, UsersType} from \"../types/types\";\r\nimport {AppStateType} from \"./reduxstore\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = 'SET-USERS';\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT';\r\nconst ON_NUMBER_CHANGE = 'ON-NUMBER-CHANGE';\r\nconst SEARCH_NUMBER = 'SEARCH-NUMBER';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE-IS-FETCHING';\r\nconst TOGGLE_IS_FETCHING_PROGRESS = 'TOGGLE-IS-FETCHING-PROGRESS';\r\n\r\n\r\nlet initialState = {\r\n    users: [\r\n        /*\r\n        {\r\n            id: 1,\r\n            ava: 'http://zhaba.ru/storage-10667/images-4356/7da28183c1ca335727f6033007c24c3f_74356.gif',\r\n            followed: true,\r\n            fullName: 'Andry',\r\n            status: 'Сижу кушаю',\r\n            location: {city: 'Dnipro', country: 'Ukraine'}\r\n        },\r\n        {\r\n            id: 2,\r\n            ava: 'http://zhaba.ru/storage-10667/images-4356/2ec52d3e31cc84526b5c1b8d332bb5f2_74356.gif',\r\n            followed: false,\r\n            fullName: 'Viktoriya',\r\n            status: 'на море',\r\n            location: {city: 'Poltava', country: 'Ukraine'}\r\n        },\r\n        {\r\n            id: 3,\r\n            ava: 'http://zhaba.ru/storage-10667/images-4356/54c86b4b33e968bb15eeea983d72a850_74356.gif',\r\n            followed: true,\r\n            fullName: 'Natalia',\r\n            status: 'в астрале',\r\n            location: {city: 'Dnipro', country: 'Ukraine'}\r\n        },\r\n        {\r\n            id: 4,\r\n            ava: 'http://zhaba.ru/storage-10667/images-4356/05f88dffdf9a406fe9b0bee9df3160a5_74356.gif',\r\n            followed: false,\r\n            fullName: 'Dmitry',\r\n            status: 'я Сенсей',\r\n            location: {city: 'Minsk', country: 'Belarus'}\r\n        },\r\n    */\r\n    ] as Array<UsersType>,\r\n    pageSize: 5 as number,\r\n    totalUsersCount: 0 as number,\r\n    currentPage: 1 as number,\r\n    numberChange: 0 as number,\r\n    isFetching: false as boolean,\r\n    followingInProgress: [] as Array<number>,///массив идшек юзеров\r\n};\r\nexport type initialStateType = typeof initialState;\r\nexport const usersReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectArray(state.users, action.userId, 'id', {followed: true})\r\n                /*users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })*/\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectArray(state.users, action.userId, 'id', {followed: false})\r\n                /*users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })*/\r\n            }\r\n        case SET_USERS: {\r\n            return {\r\n                ...state, users: [...action.users]\r\n            }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.totalCount}\r\n        }\r\n        case ON_NUMBER_CHANGE: {\r\n            return {...state, numberChange: action.number}\r\n        }\r\n        case SEARCH_NUMBER: {\r\n            if (state.numberChange >= 1 && state.numberChange <= state.totalUsersCount / state.pageSize) {\r\n                return {...state, currentPage: state.numberChange}\r\n            } else {\r\n                return {...state, currentPage: 1}\r\n            }\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            {\r\n                return {...state, isFetching: action.isFetching}\r\n            }\r\n        }\r\n        case TOGGLE_IS_FETCHING_PROGRESS: {\r\n            {\r\n                return {\r\n                    ...state,\r\n                    followingInProgress: action.isFetching\r\n                        ? [...state.followingInProgress, action.userId]\r\n                        : state.followingInProgress.filter(id => id != action.userId)\r\n                }\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n    //return state;\r\n}\r\n\r\ntype ActionsTypes = FollowType | UnFollowType | SetUsersType | SetCurrentPageType | SetTotalUsersCountType |\r\n    OnNumberChangeType | SearchNumberType | ToggleIsFetchingType | ToggleIsFetchingProgress\r\ntype FollowType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\nexport const follow = (userId: number): FollowType => {\r\n    return {\r\n        type: FOLLOW,\r\n        userId,\r\n    }\r\n}\r\ntype UnFollowType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\nexport const unFollow = (userId: number): UnFollowType => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        userId,\r\n    }\r\n}\r\ntype SetUsersType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UsersType>\r\n}\r\nexport const setUsers = (users: Array<UsersType>): SetUsersType => {\r\n    return {type: SET_USERS, users}\r\n};\r\ntype SetCurrentPageType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageType => {\r\n    return {type: SET_CURRENT_PAGE, currentPage}\r\n};\r\ntype SetTotalUsersCountType = {\r\n    type: typeof SET_TOTAL_USERS_COUNT\r\n    totalCount: number\r\n}\r\nexport const setTotalUsersCount = (totalCount: number): SetTotalUsersCountType => {\r\n    return {type: SET_TOTAL_USERS_COUNT, totalCount}\r\n};\r\ntype OnNumberChangeType = {\r\n    type: typeof ON_NUMBER_CHANGE\r\n    number: any\r\n}\r\nexport const onNumberChange = (number: any): OnNumberChangeType => {////////////////////////////////xzxzxzxzxzx\r\n    return {type: ON_NUMBER_CHANGE, number}\r\n};\r\ntype SearchNumberType = {\r\n    type: typeof SEARCH_NUMBER\r\n}\r\n\r\nexport const searchNumber = (): SearchNumberType => {\r\n    return {type: SEARCH_NUMBER}\r\n};\r\ntype ToggleIsFetchingType = {\r\n    type: typeof TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingType => {\r\n    return {type: TOGGLE_IS_FETCHING, isFetching}\r\n};\r\ntype ToggleIsFetchingProgress = {\r\n    type: typeof TOGGLE_IS_FETCHING_PROGRESS\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\nexport const toggleIsFetchingProgress = (isFetching: boolean, userId: number): ToggleIsFetchingProgress => {\r\n    return {type: TOGGLE_IS_FETCHING_PROGRESS, isFetching, userId}\r\n}\r\n\r\n\r\ntype getStateType = () => AppStateType;\r\ntype CurrentDispatchType = Dispatch<ActionsTypes>;\r\ntype ThunkActionType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>;\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number) => {\r\n    return async (dispatch: CurrentDispatchType, getState: getStateType) => {\r\n        dispatch(toggleIsFetching(true));\r\n        let data = await userAPI.getUsers(currentPage, pageSize);\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\n\r\nconst _followUnFollowFlow = async (\r\n    dispatch: CurrentDispatchType,\r\n    id: number,\r\n    apiMethod: any,\r\n    actionCreator: (userId: number)=>FollowType|UnFollowType) => {\r\n    dispatch(toggleIsFetchingProgress(true, id));\r\n    let data = await apiMethod(id);\r\n    if (data.resultCode == 0) {\r\n        dispatch(actionCreator(id))\r\n    }\r\n    dispatch(toggleIsFetchingProgress(false, id));\r\n}\r\n\r\nexport const deleteUser = (id: number): ThunkActionType => {\r\n    return async (dispatch) => {\r\n        let apiMethod = followAPI.deleteUser.bind(id)\r\n        let actionCreator = unFollow;\r\n        _followUnFollowFlow(dispatch, id, apiMethod, actionCreator);\r\n    }\r\n}\r\nexport const postUser = (id: number): ThunkActionType => {\r\n    return async (dispatch) => {\r\n        let apiMethod = followAPI.postUser.bind(id)\r\n        let actionCreator = follow;\r\n        _followUnFollowFlow(dispatch, id, apiMethod, actionCreator);\r\n    }\r\n    /*return async (dispatch) => {\r\n        dispatch(toggleIsFetchingProgress(true, id));\r\n        let data = await followAPI.postUser(id);\r\n        if (data.resultCode == 0) {\r\n            dispatch(follow(id))\r\n        }\r\n        dispatch(toggleIsFetchingProgress(false, id));\r\n    }*/\r\n}\r\n","import s from \"../Paginator/Paginator.module.css\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport DialogItem from \"../../Dialogs/DialogItem/DialogItem\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../FormControls/FormControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\n\r\ntype PropsType = {\r\n    currentPage: number;\r\n    onPageChanged: (arg0: number)=>void;\r\n    totalUsersCount: number;\r\n    pageSize: number;\r\n}\r\nconst Paginator: React.FC<PropsType> = (props) => {\r\n    let pagesCount: number = Math.ceil(props.totalUsersCount / props.pageSize);\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    let thispage = 1;\r\n    let StepsInTheBlock=10;\r\n    let [startOfBlock, setStartOfBlock] = useState<number>( 0)\r\n    let [endOfBlock, setEndOfBlock] = useState( 10)\r\n    let [someBlock, editSomeBlock] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\r\n    if (startOfBlock==0) setStartOfBlock(1)\r\n    let next = () => {\r\n        setEndOfBlock(endOfBlock += StepsInTheBlock);\r\n        setStartOfBlock(startOfBlock += StepsInTheBlock)\r\n        let newPages = pages.filter(item => item <= endOfBlock && item >= startOfBlock);\r\n        editSomeBlock(newPages);\r\n    }\r\n    let prev = () => {\r\n        setEndOfBlock(endOfBlock -= StepsInTheBlock);\r\n        setStartOfBlock(startOfBlock -= StepsInTheBlock)\r\n        let newPages = pages.filter(item => item <= endOfBlock && item >= startOfBlock);\r\n        editSomeBlock(newPages);\r\n    }\r\n    const onSubmit = (formData: any) => {\r\n        props.onPageChanged(formData.searchPage)\r\n    }\r\n    const maxLength4 = maxLengthCreator(4)\r\n    const searchPage = (props:any) => {\r\n        return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field component={Textarea} name={'searchPage'} validate={[requiredField, maxLength4]}\r\n                           placeholder={'Введите страницу'}/>\r\n                </div>\r\n                <div>\r\n                    <button>Поиск страницы</button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n    const SearchPageForm = reduxForm({\r\n        form: \"searchPage\"\r\n    })(searchPage);\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {startOfBlock != 1 && <span onClick={prev} className={s.notActive}>Previous</span>}\r\n                {someBlock.map((d:number) => <span onClick={() => {\r\n                    props.onPageChanged(d)\r\n                }} className={props.currentPage == d ? s.current : s.notActive}> {d} </span>)}\r\n                {endOfBlock != pages.length && <span onClick={next} className={s.notActive}>Next</span>}\r\n            </div>\r\n            <div>\r\n                Введите номер страницы\r\n                <SearchPageForm initialValues={{value: props.currentPage}} onSubmit={onSubmit}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Paginator;\r\n","import React from 'react';\r\nimport s from './Users.module.css';\r\nimport userPhoto from \"../../asets/images/instami-avatarka-v-instagram-9.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {followAPI} from \"../../api/api\";\r\nimport {deleteUser} from \"../../redux/usersReducer\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormControls/FormControls\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\n\r\nconst User = ({user, followingInProgress, deleteUser, postUser}) => {\r\n    return (<div className={s.margin}>\r\n            <div className={s.wrapper}>\r\n                <div className={s.photo}>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.large != null ? user.photos.large : userPhoto} className={s.userPhoto}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div className={s.name}>{user.name}</div>\r\n                <div className={s.city}>{user.id}</div>\r\n                <div className={s.status}>{user.status != null ? user.status : \"userStatus\"}</div>\r\n                <div className={s.button}>\r\n                    {user.followed\r\n                        ? <button disabled={followingInProgress.some(id => id == user.id)} onClick={() => {\r\n                            deleteUser(user.id)\r\n                        }}>Отписаться</button>\r\n                        : <button disabled={followingInProgress.some(id => id == user.id)} onClick={() => {\r\n                            postUser(user.id)\r\n                        }}>Подписаться</button>\r\n                    }\r\n                </div>\r\n                <div className={s.country}>{\"props.location.country\"}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport s from './Users.module.css';\r\nimport User from \"./User\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport {UsersType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    currentPage: number;\r\n    onPageChanged: (arg0: number)=>void;\r\n    totalUsersCount: number;\r\n    pageSize: number;\r\n    users: Array<UsersType>\r\n    followingInProgress: Array<number>;\r\n    deleteUser: ()=>void;\r\n    postUser: ()=>void;\r\n}\r\nconst Users: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                Поиск по сайту\r\n                <Paginator currentPage={props.currentPage}\r\n                           onPageChanged={props.onPageChanged}\r\n                           totalUsersCount={props.totalUsersCount}\r\n                           pageSize={props.pageSize}\r\n                />\r\n            </div>\r\n            {props.users.map((u: any) => <User key={u.id}\r\n                                          user={u}\r\n                                          followingInProgress={props.followingInProgress}\r\n                                          deleteUser={props.deleteUser}\r\n                                          postUser={props.postUser}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users;","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./reduxstore\";\r\n\r\nexport const getUsers=(state: AppStateType)=>{\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsersSelector=(state: AppStateType)=>{\r\n    return getUsers(state).filter(u=>true);\r\n}\r\n\r\nexport const getUsersSuperSelector = createSelector(getUsers, (users)=>{\r\n    return users.filter(u=>true);\r\n})\r\n\r\nexport const getPageSize=(state: AppStateType)=>{\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount=(state: AppStateType)=>{\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage=(state: AppStateType)=>{\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getNumberChange=(state: AppStateType)=>{\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getIsFetching=(state: AppStateType)=>{\r\n    return state.usersPage.isFetching;\r\n}\r\nexport const getFollowingInProgress=(state: AppStateType)=>{\r\n    return state.usersPage.followingInProgress;\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow,\r\n    setUsers,\r\n    unFollow,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    onNumberChange,\r\n    searchNumber,\r\n    toggleIsFetching, toggleIsFetchingProgress, requestUsers, deleteUser, postUser,\r\n} from \"../../redux/usersReducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getNumberChange,\r\n    getPageSize, getTotalUsersCount, getUsersSuperSelector,\r\n} from \"../../redux/usersSelectors\";\r\nimport {UsersType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../redux/reduxstore\";\r\n\r\ntype MapStatePropsType={\r\n    totalUsersCount: number;\r\n    pageSize: number;\r\n    users: Array<UsersType>;\r\n    currentPage: number;\r\n    isFetching: boolean;\r\n    followingInProgress: Array<number>;\r\n    numberChange: number;\r\n}\r\ntype MapDispatchPropsType={\r\n    setCurrentPage:(pageNumber: number)=>void;\r\n    searchNumber: ()=>void;\r\n    requestUsers: (currentPag: number, pageSize: number)=>void;\r\n    deleteUser: (arg0: number)=>void;\r\n    postUser: (arg0: number)=>void;\r\n    onNumberChange: (arg0: number)=>void\r\n    setTotalUsersCount: (arg0: number)=>void;\r\n    toggleIsFetching: (arg0: boolean)=>void;\r\n    toggleIsFetchingProgress: any;\r\n    setUsers: any;\r\n}\r\ntype OwnPropsType= {\r\n    pageTitle: string;\r\n    pageNumber: number;\r\n}\r\ntype PropsType=MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\nclass UsersAPIComponent extends React.Component<PropsType> {\r\n    /*constructor(props) {\r\n        super(props);\r\n        }\r\n    }*/\r\n    componentDidMount() {\r\n        let {currentPage, pageSize, requestUsers} = this.props\r\n        requestUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        let {setCurrentPage, requestUsers, pageSize} = this.props\r\n        setCurrentPage(pageNumber);\r\n        requestUsers(pageNumber, pageSize);\r\n    }\r\n    onNumberChange = (e: any) => {\r\n        let number = e.target.value;\r\n        onNumberChange(number);\r\n    };\r\n    searchNumber = () => {\r\n        let {searchNumber, requestUsers, currentPage, pageSize} = this.props\r\n        searchNumber();\r\n        requestUsers(currentPage, pageSize);\r\n    };\r\n\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <h3>{this.props.pageTitle}</h3>\r\n            <Users\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                //searchNumber={this.searchNumber}\r\n               // onNumberChange={this.onNumberChange}\r\n                //numberChange={this.props.numberChange}\r\n                users={this.props.users}\r\n              // unFollow={this.props.unFollow}\r\n               //follow={this.props.follow}\r\n                followingInProgress={this.props.followingInProgress}\r\n                //toggleIsFetchingProgress={this.props.toggleIsFetchingProgress}\r\n                deleteUser={()=>this.props.deleteUser}\r\n                postUser={()=>this.props.postUser}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n/*let mapStateToProps = (state) => {\r\n    return {\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        pageSize: state.usersPage.pageSize,\r\n        users: state.usersPage.users,\r\n        currentPage: state.usersPage.currentPage,\r\n        numberChange: state.usersPage.numberChange,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n    }\r\n}*/\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        pageSize: getPageSize(state),\r\n        //users: getUsers(state),\r\n        users: getUsersSuperSelector(state),\r\n        currentPage: getCurrentPage(state),\r\n        numberChange: getNumberChange(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    }\r\n}\r\n/*let AuthRedirectComponent=withAuthRedirect(UsersAPIComponent)\r\nconst UsersContainer = connect(mapStateToProps, {\r\n    follow, unFollow, setUsers, setCurrentPage, setTotalUsersCount,\r\n    onNumberChange, searchNumber, toggleIsFetching, toggleIsFetchingProgress,\r\n    getUsers, deleteUser, postUser\r\n})(AuthRedirectComponent);*/\r\n\r\n//export default UsersContainer;\r\n\r\n\r\n\r\nexport default compose(\r\n    //TStateProps={}, TDispatchProps={}, TOwnProps={}, State= DefaultRootState\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {\r\n        /*follow, unFollow,*/ setUsers, setCurrentPage, setTotalUsersCount, searchNumber, toggleIsFetching, toggleIsFetchingProgress,\r\n        requestUsers, deleteUser, postUser, onNumberChange\r\n    }),\r\n   // withAuthRedirect,\r\n\r\n)(UsersAPIComponent)","import React from 'react';\r\nimport s from './Music.module.css';\r\n\r\nconst Music = (props) => {\r\n    return (\r\n        <div>\r\n        Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userPhoto from \"../../asets/images/instami-avatarka-v-instagram-9.png\";\r\n\r\nconst Header = (props) => {\r\n    return <header className={s.header}>\r\n        <img src='https://www.freelogodesign.org/Content/img/logo-ex-7.png'/>\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth ? <div className={s.wrapper}>\r\n                    <div className={s.item}><img src={props.smallPhoto == null ? userPhoto : props.smallPhoto}/></div>\r\n                    <div className={s.item}> {props.login}</div>\r\n                    <button className={s.item} onClick={props.LogoutAC}>Log out</button>\r\n                </div>\r\n                : <NavLink to=\"/login\" activeClassName={s.activeLink}>Login</NavLink>}\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport * as axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {LogoutAC} from \"../../redux/authReducer\";\r\n\r\n\r\nclass HeaderContainer extends React.Component {\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStatetoProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n    id: state.auth.userId,\r\n});\r\nexport default connect(mapStatetoProps, {LogoutAC})(HeaderContainer);","import React from 'react';\r\nimport s from '../common/FormControls/FormControls.module.css';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input, CreateField} from \"../common/FormControls/FormControls\";\r\nimport {requiredField} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profileReducer\";\r\nimport {LoginAC, LogoutAC} from \"../../redux/authReducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nconst LoginForm = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {CreateField(\"Email\", 'email', [requiredField], Input)}\r\n            {CreateField(\"Password\", 'password', [requiredField], Input, \"password\")}\r\n            {CreateField(null, 'rememberMe', null, Input, \"checkbox\", \"RememberMe\")}\r\n            {captchaUrl && <div><img src={captchaUrl}/>{CreateField(\"captcha\", 'captcha', [requiredField], Input)}</div>}\r\n            {error && <div className={s.formSummmayError}>\r\n                {error}\r\n            </div>}\r\n\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\nconst LoginReduxForm = reduxForm({\r\n    form: \"login\"\r\n})(LoginForm)\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.LoginAC(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n        console.log(formData)\r\n    }\r\n    if (props.isAuth) {\r\n\r\n        return <Redirect to='/profile'/>\r\n    } else return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet LoginRedirectComponent = withAuthRedirect(Login)\r\nlet mapStateToProps = (state) => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth,\r\n})\r\nexport default connect(mapStateToProps, {LogoutAC, LoginAC})(Login);","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport {profileReducer} from \"./profileReducer\";\r\nimport {sidebarReducer} from \"./sidebarReducer\";\r\nimport {usersReducer} from \"./usersReducer\";\r\nimport {authReducer} from \"./authReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport {appReducer} from \"./appReducer\";\r\nimport {dialogsReducer} from \"./dialogsReducer\";\r\n\r\nlet rootReducer=combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n});\r\n\r\ntype RootReducerType= typeof rootReducer;\r\nexport type AppStateType=ReturnType<RootReducerType>\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// @ts-ignore\r\nwindow.__store__=store;\r\n\r\nexport default store;\r\n","import React, {Suspense} from 'react';\r\nimport Preloader from \"../components/common/Preloader/Preloader\";\r\n\r\nexport const withSuspense=(Component)=>{\r\n    return (props)=>{return (\r\n        <Suspense fallback={<Preloader/>}>\r\n            <Component {...props} />\r\n        </Suspense>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport s from './Error404.module.css';\r\nimport error from \"../../../asets/svg/868843.svg\";\r\n\r\nconst Error404 = (props) => {\r\n    return (\r\n        <div>\r\n            <img className={s.error} src={error}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error404;","import React, {Suspense} from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport {HashRouter, BrowserRouter, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport News from \"./components/News/News\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport Music from \"./components/Music/Music\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp, letError} from \"./redux/appReducer\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nimport store from \"./redux/reduxstore\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\nimport Error404 from \"./components/common/Error/Error404\";\r\nimport process from \"process\";\r\n\r\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"));\r\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"));\r\n\r\nclass App extends React.Component {\r\n    catchAllUnhandledErrors=(reason)=>{\r\n        //letError(reason.reason)\r\n    }\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (<div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className=\"app-wrapper-content\">\r\n                    <Switch>\r\n                        <Route exact path=\"/\" render={withSuspense(ProfileContainer)}/>\r\n                        <Route path=\"/dialogs\" render={withSuspense(DialogsContainer)}/>\r\n                        <Route path=\"/profile/:userId?\" render={withSuspense(ProfileContainer)}/>\r\n                        <Route path=\"/users\" render={() => <UsersContainer pageTitle =\"Самураи\"/>}/>\r\n                        <Route path=\"/login\" render={() => <Login/>}/>\r\n                        <Route path=\"/music\" render={() => <Music/>}/>\r\n                        <Route path=\"/news\" render={() => <News/>}/>\r\n                        <Route path=\"/settings\" render={() => <Settings/>}/>\r\n                        <Route path=\"*\" render={() => <Error404/>}/>\r\n                    </Switch>\r\n\r\n                </div>\r\n                <div className='error'>{this.props.globalError}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    initialized: state.app.initialized,\r\n    globalError: state.app.globalError,\r\n})\r\nlet AppContainer = compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp, letError},\r\n    ))(App);\r\n\r\nconst SamuraiJSApp = (props) => {\r\n    return (\r\n        <HashRouter basename={process.env.PUBLIC_URL}>\r\n            <Provider store={store}>\r\n                <AppContainer/>\r\n            </Provider>\r\n        </HashRouter>\r\n\r\n    )\r\n}\r\nexport default SamuraiJSApp;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport SamuraiJSApp from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<SamuraiJSApp/>, document.getElementById('root'));\r\n\r\n//serviceWorker.unregister();\r\n//rerenderEntiretree();\r\n/*store.subscribe(rerenderEntiretree);*/\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2yvhM\",\"dialog\":\"Dialogs_dialog__k930i\",\"dialogsItems\":\"Dialogs_dialogsItems__1eIO1\",\"active\":\"Dialogs_active__2jYKT\",\"messages\":\"Dialogs_messages__3cD4p\",\"message\":\"Dialogs_message__3I8nx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2v6Qh\",\"loginBlock\":\"Header_loginBlock__3uozL\",\"wrapper\":\"Header_wrapper__1sROT\",\"item\":\"Header_item__2DBve\"};","import {setAuthUserData, SetAuthUserDataType, setUserSmallPhoto, SetUserSmallPhotoType} from \"./authReducer\";\r\nimport {authAPI, profileAPI} from \"../api/api\";\r\n//import {constants} from \"os\";\r\n//import {constants} from \"os\";\r\n//import {AppStateType} from \"./reduxstore\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED-SUCCESS\";\r\nconst ER = 'ERROR';\r\n\r\nexport type InitialStateType = {\r\n    initialized: boolean;\r\n    globalError: string;\r\n}\r\nlet initialState: InitialStateType = {\r\n    initialized: false,\r\n    globalError: \"\",\r\n};\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case ER:\r\n            return {\r\n                ...state,\r\n                globalError: action.error,\r\n            }\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsTypes =InitializedSuccessActionType | letErrorActionType| SetAuthUserDataType | SetUserSmallPhotoType;\r\n\r\ntype InitializedSuccessActionType = { type: typeof INITIALIZED_SUCCESS }\r\n\r\nexport const initializedSuccess = (): InitializedSuccessActionType => {\r\n    return {type: INITIALIZED_SUCCESS}\r\n};\r\nexport type letErrorActionType = { type: typeof ER; error: string }\r\nexport const letError = (error: string):letErrorActionType => {\r\n    return {\r\n        type: ER,\r\n        error: error\r\n    }\r\n};\r\n\r\n//type getStateType = () => AppStateType;\r\ntype CurrentDispatchType = Dispatch<ActionsTypes>;\r\n\r\nexport const thunkLetError = (error: string) => (dispatch: CurrentDispatchType) => {\r\n    dispatch(letError(error))\r\n    setTimeout(() => {\r\n        dispatch(letError(''))\r\n    }, 5000)\r\n}\r\n\r\ntype FirstDataType = {\r\n    resultCode: number;\r\n    data: {\r\n        id: number;\r\n        login: string;\r\n        email: string;\r\n    };\r\n}\r\ntype SecondDataType = {\r\n    photos: {\r\n        small: string;\r\n    }\r\n}\r\nexport const initializeApp = () => (dispatch: CurrentDispatchType) => {\r\n    let id: number;\r\n    let login;\r\n    let email;\r\n    authAPI.authMe().then((data: FirstDataType) => {\r\n        if (data.resultCode == 0) {\r\n            id = data.data.id;\r\n            login = data.data.login;\r\n            email = data.data.email;\r\n            dispatch(setAuthUserData(id, email, login, true));\r\n        }\r\n    }).then(() => {\r\n        profileAPI.getUser(id).then((data: SecondDataType) => {\r\n            dispatch(setUserSmallPhoto(data.photos.small));\r\n        })\r\n    }).then(() => {\r\n        dispatch(initializedSuccess());\r\n    });\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControlError\":\"FormControls_formControlError__uemkh\",\"error\":\"FormControls_error__1WXK3\",\"formSummmayError\":\"FormControls_formSummmayError__3r7xW\"};","import React from 'react';\r\nimport s from './Preloader.module.css';\r\nimport preloader from \"../../../asets/svg/Double Ring-2.2s-200px.svg\";\r\n\r\nconst Preloader = (props) => {\r\n    return (\r\n        <div>\r\n            <img src={preloader}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"current\":\"Paginator_current__2t5fU\",\"notActive\":\"Paginator_notActive__1bMe3\"};","module.exports = __webpack_public_path__ + \"static/media/instami-avatarka-v-instagram-9.47699637.png\";","import {authAPI, profileAPI} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostsType, ProfileType} from \"../types/types\";\r\nimport {SetAuthUserDataType, SetUserSmallPhotoType} from \"./authReducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./reduxstore\";\r\nimport {letErrorActionType, thunkLetError} from \"./appReducer\";\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst SET_USER_PROFILE = \"SET-USER-PROFILE\";\r\nconst SET_STATUS = \"SET-STATUS\";\r\nconst DELETE_POST = \"DELETE-POST\";\r\nconst SAVE_PHOTO_SUCCESS = \"SAVE-PHOTO-SUCCESS\";\r\nconst UPDATE_PROFILE = \"UPDATE-PROFILE\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, post: 'hi, how are you', likesCount: 1},\r\n        {id: 2, post: 'It`s my first post', likesCount: 2},\r\n    ]as Array<PostsType>,\r\n    profile: null as ProfileType| null,\r\n    status: \"\" as string,\r\n    newPostText: '',\r\n};\r\nexport type initialStateType = typeof initialState;\r\n\r\nexport const profileReducer = (state = initialState, action: ActionsTypes):initialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 3,\r\n                post: action.text,\r\n                likesCount: 0,\r\n            }\r\n            let stateCopy = {...state};\r\n            stateCopy.posts = [...state.posts];\r\n            stateCopy.posts.push(newPost);\r\n            return stateCopy;\r\n        }\r\n        case DELETE_POST: {\r\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case SET_STATUS: {\r\n            return {...state, status: action.status}\r\n        }\r\n        case SAVE_PHOTO_SUCCESS: {\r\n            return {...state, profile: {...state.profile, photos:{...state.profile?.photos, large:action.large,\r\n                    small:action.small} } as ProfileType}\r\n        }\r\n        case UPDATE_PROFILE: {\r\n            return {...state, profile: {...state.profile, aboutMe:action.aboutMe,\r\n                                        contacts: action.contacts, lookingForAJob: action.lookingForAJob,\r\n                                        lookingForAJobDescription:action.lookingForAJobDescription} as ProfileType}\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n    return state;\r\n}\r\ntype ActionsTypes =AddPostActionCreatorType| DeletePostType|SetStatusType|SetUserProfileType|UpdateProfileType|\r\n    SavePhotoSuccessType| letErrorActionType;\r\ntype AddPostActionCreatorType = {\r\n    type: typeof ADD_POST;\r\n    text: string;\r\n}\r\n\r\nexport const addPostActionCreator = (text: string):AddPostActionCreatorType => {\r\n    return {\r\n        type: ADD_POST,\r\n        text,\r\n    }\r\n};\r\ntype DeletePostType = {\r\n    type: typeof DELETE_POST;\r\n    postId: number;\r\n}\r\nexport const deletePost = (postId: number): DeletePostType => {\r\n    return {type: DELETE_POST, postId}\r\n};\r\ntype SetStatusType = {\r\n    type: typeof SET_STATUS;\r\n    status: string;\r\n}\r\nexport const setStatus = (status: string): SetStatusType => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status: status,\r\n    }\r\n};\r\ntype SetUserProfileType = {\r\n    type: typeof SET_USER_PROFILE;\r\n    profile: ProfileType;\r\n}\r\nconst setUserProfile = (profile: ProfileType): SetUserProfileType => { //////////////////////////////////////////any\r\n    return {type: SET_USER_PROFILE, profile}\r\n};\r\n\r\ntype UpdateProfileType = {\r\n    type: typeof UPDATE_PROFILE;\r\n    aboutMe: string;\r\n    contacts:{\r\n        github: string;\r\n        vk: string;\r\n        facebook: string;\r\n        instagram: string;\r\n        twitter: string;\r\n        website: string;\r\n        youtube: string;\r\n        mainLink: string;\r\n    };\r\n    lookingForAJobDescription: string;\r\n    lookingForAJob: boolean;\r\n    photos:{\r\n        small: null | string,\r\n        large: null| string,\r\n    }\r\n}\r\ntype UpdateProfileTypeWithoutPhoto = {\r\n    type: typeof UPDATE_PROFILE;\r\n    aboutMe: string;\r\n    contacts:{\r\n        github: string;\r\n        vk: string;\r\n        facebook: string;\r\n        instagram: string;\r\n        twitter: string;\r\n        website: string;\r\n        youtube: string;\r\n        mainLink: string;\r\n    };\r\n    lookingForAJobDescription: string;\r\n    lookingForAJob: boolean;\r\n}\r\nconst updateProfile = (aboutMe: string,\r\n                       contacts:{\r\n                           github: string;\r\n                           vk: string;\r\n                           facebook: string;\r\n                           instagram: string;\r\n                           twitter: string;\r\n                           website: string;\r\n                           youtube: string;\r\n                           mainLink: string;\r\n                       },\r\n                       lookingForAJobDescription: string,\r\n                       lookingForAJob: boolean):  UpdateProfileTypeWithoutPhoto => {\r\n    return {type: UPDATE_PROFILE, aboutMe, contacts, lookingForAJobDescription, lookingForAJob}\r\n};\r\ntype SavePhotoSuccessType = {\r\n    type: typeof SAVE_PHOTO_SUCCESS;\r\n    small: string| null;\r\n    large:string| null;\r\n}\r\nconst savePhotoSuccess = (small:string | null, large:string| null): SavePhotoSuccessType => {\r\n    debugger\r\n    return {type: SAVE_PHOTO_SUCCESS, small, large}\r\n};\r\n\r\ntype CurrentDispatchType = Dispatch<ActionsTypes>;\r\ntype ThunkActionType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes | FormAction>;\r\n\r\n\r\nexport const getUserProfile = (userId: number): ThunkActionType => async (dispatch) => {\r\n    let data = await profileAPI.getUser(userId)\r\n    dispatch(setUserProfile(data));\r\n}\r\nexport const getStatus = (userId: number): ThunkActionType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    if (data == null || data == \"\") dispatch(setStatus('У меня нет статуса'));\r\n    else dispatch(setStatus(data));\r\n}\r\nexport const updateStatus = (status: string): ThunkActionType => async (dispatch) => {\r\n\r\n        let data = await profileAPI.updateStatus(status)\r\n        if (data.resultCode == 0) {\r\n            dispatch(setStatus(status));\r\n        }\r\n        if (data.resultCode !== 0){\r\n\r\n            dispatch(thunkLetError(`${data.messages[0]}`))\r\n        }\r\n}\r\n\r\nexport const savePhoto = (file: any): ThunkActionType => async (dispatch) => {\r\n    debugger\r\n    let r = await profileAPI.savePhoto(file)\r\n    debugger\r\n    if (r.resultCode==0) {\r\n        debugger\r\n        dispatch(savePhotoSuccess(r.data.photos.small, r.data.photos.large));\r\n    }\r\n}\r\n\r\nexport const sendForm = (aboutMe: string,\r\n                         fullName: string,\r\n                         github: string,\r\n                         vk: string,\r\n                         facebook: string,\r\n                         instagram: string,\r\n                         twitter: string,\r\n                         website: string,\r\n                         youtube: string,\r\n                         mainLink: string,\r\n                         lookingForAJobDescription: string,\r\n                         lookingForAJob: boolean): ThunkActionType => async (dispatch) => {\r\n    lookingForAJob==undefined ? lookingForAJob=false : lookingForAJob=true\r\n    let formData = {\r\n        aboutMe: aboutMe,\r\n            contacts: {\r\n            github: github,\r\n            vk: vk,\r\n            facebook: facebook,\r\n            instagram: instagram,\r\n            twitter: twitter,\r\n            website: website,\r\n            youtube: youtube,\r\n            mainLink: mainLink,\r\n        },\r\n        lookingForAJob: lookingForAJob,\r\n        lookingForAJobDescription: lookingForAJobDescription,\r\n        fullName: fullName,\r\n        userId: 12090,\r\n    }\r\n    let contacts= {\r\n            github: github,\r\n            vk: vk,\r\n            facebook: facebook,\r\n            instagram: instagram,\r\n            twitter: twitter,\r\n            website: website,\r\n            youtube: youtube,\r\n            mainLink: mainLink,\r\n        };\r\n    //dispatch (updateProfile(aboutMe, contacts, lookingForAJobDescription, lookingForAJob))\r\n    let data = await profileAPI.formData(formData);\r\n    if (data.resultCode == 0) dispatch (updateProfile(aboutMe, contacts, lookingForAJobDescription, lookingForAJob))\r\n    else {\r\n        dispatch(stopSubmit('profeleData', {_error: data.messages[0]}));\r\n       return Promise.reject(data.messages[0]);\r\n    }\r\n\r\n\r\n};\r\n","import React from 'react';\r\nimport s from './Avatar.module.css';\r\n\r\nconst Avatar = (props) => {\r\n    return (\r\n        <div>\r\n            <span className={s.avatar}>\r\n                <img src={props.state.ava}/>\r\n            </span>\r\n            <span>{props.state.name}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Avatar;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Avatar from \"./Avatar/Avatar\";\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={\"/dialogs/\" + props.id}><Avatar state={props}/></NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;"],"sourceRoot":""}